<?php
/**
 * Financials
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Financials Class Doc Comment
 *
 * @category Class
 * @description Financials
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Financials implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Financials';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ebitda_margin' => 'float',
        'accumulated_other_comprehensive_income' => 'int',
        'accumulated_retained_earnings_deficit' => 'int',
        'asset_turnover' => 'int',
        'assets' => 'int',
        'assets_average' => 'int',
        'assets_current' => 'int',
        'assets_non_current' => 'int',
        'average_equity' => 'int',
        'book_value_per_share' => 'float',
        'calendar_date' => '\DateTime',
        'capital_expenditure' => 'int',
        'cash_and_equivalents' => 'int',
        'cash_and_equivalents_usd' => 'int',
        'consolidated_income' => 'int',
        'cost_of_revenue' => 'int',
        'current_liabilities' => 'int',
        'current_ratio' => 'float',
        'debt' => 'int',
        'debt_current' => 'int',
        'debt_non_current' => 'int',
        'debt_to_equity_ratio' => 'float',
        'debt_usd' => 'int',
        'deferred_revenue' => 'int',
        'deposits' => 'int',
        'depreciation_amortization_and_accretion' => 'int',
        'dividend_yield' => 'int',
        'dividends_per_basic_common_share' => 'int',
        'earning_before_interest_taxes' => 'int',
        'earning_before_interest_taxes_usd' => 'int',
        'earnings_before_interest_taxes_depreciation_amortization' => 'int',
        'earnings_before_interest_taxes_depreciation_amortization_usd' => 'int',
        'earnings_before_tax' => 'int',
        'earnings_per_basic_share' => 'float',
        'earnings_per_basic_share_usd' => 'float',
        'earnings_per_diluted_share' => 'float',
        'effect_of_exchange_rate_changes_on_cash' => 'int',
        'enterprise_value' => 'int',
        'enterprise_value_over_ebit' => 'int',
        'enterprise_value_over_ebitda' => 'float',
        'foreign_currency_usd_exchange_rate' => 'int',
        'free_cash_flow' => 'int',
        'free_cash_flow_per_share' => 'float',
        'goodwill_and_intangible_assets' => 'int',
        'gross_margin' => 'float',
        'gross_profit' => 'int',
        'income_tax_expense' => 'int',
        'interest_expense' => 'int',
        'inventory' => 'int',
        'invested_capital' => 'int',
        'invested_capital_average' => 'int',
        'investments' => 'int',
        'investments_current' => 'int',
        'investments_non_current' => 'int',
        'issuance_debt_securities' => 'int',
        'issuance_equity_shares' => 'int',
        'liabilities_non_current' => 'int',
        'market_capitalization' => 'int',
        'net_cash_flow' => 'int',
        'net_cash_flow_business_acquisitions_disposals' => 'int',
        'net_cash_flow_from_financing' => 'int',
        'net_cash_flow_from_investing' => 'int',
        'net_cash_flow_from_operations' => 'int',
        'net_cash_flow_investment_acquisitions_disposals' => 'int',
        'net_income' => 'int',
        'net_income_common_stock' => 'int',
        'net_income_common_stock_usd' => 'int',
        'net_income_to_non_controlling_interests' => 'int',
        'net_loss_income_from_discontinued_operations' => 'int',
        'operating_expenses' => 'int',
        'operating_income' => 'int',
        'payment_dividends_other_cash_distributions' => 'int',
        'payout_ratio' => 'int',
        'period' => 'string',
        'preferred_dividends_income_statement_impact' => 'int',
        'price_earnings' => 'float',
        'price_sales' => 'float',
        'price_to_book_value' => 'float',
        'price_to_earnings_ratio' => 'float',
        'price_to_sales_ratio' => 'float',
        'profit_margin' => 'float',
        'property_plant_equipment_net' => 'int',
        'report_period' => '\DateTime',
        'research_and_development_expense' => 'int',
        'return_on_average_assets' => 'int',
        'return_on_average_equity' => 'int',
        'return_on_invested_capital' => 'int',
        'return_on_sales' => 'float',
        'revenues' => 'int',
        'revenues_usd' => 'int',
        'sales_per_share' => 'float',
        'selling_general_and_administrative_expense' => 'int',
        'share_based_compensation' => 'int',
        'share_factor' => 'int',
        'share_price_adjusted_close' => 'float',
        'shareholders_equity' => 'int',
        'shareholders_equity_usd' => 'int',
        'shares' => 'int',
        'tangible_asset_value' => 'int',
        'tangible_assets_book_value_per_share' => 'float',
        'tax_assets' => 'int',
        'tax_liabilities' => 'int',
        'ticker' => 'string',
        'total_liabilities' => 'int',
        'trade_and_non_trade_payables' => 'int',
        'trade_and_non_trade_receivables' => 'int',
        'updated' => '\DateTime',
        'weighted_average_shares' => 'int',
        'weighted_average_shares_diluted' => 'int',
        'working_capital' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ebitda_margin' => 'double',
        'accumulated_other_comprehensive_income' => null,
        'accumulated_retained_earnings_deficit' => null,
        'asset_turnover' => null,
        'assets' => null,
        'assets_average' => null,
        'assets_current' => null,
        'assets_non_current' => null,
        'average_equity' => null,
        'book_value_per_share' => 'double',
        'calendar_date' => 'date-time',
        'capital_expenditure' => null,
        'cash_and_equivalents' => null,
        'cash_and_equivalents_usd' => null,
        'consolidated_income' => null,
        'cost_of_revenue' => null,
        'current_liabilities' => null,
        'current_ratio' => 'double',
        'debt' => null,
        'debt_current' => null,
        'debt_non_current' => null,
        'debt_to_equity_ratio' => 'double',
        'debt_usd' => null,
        'deferred_revenue' => null,
        'deposits' => null,
        'depreciation_amortization_and_accretion' => null,
        'dividend_yield' => null,
        'dividends_per_basic_common_share' => null,
        'earning_before_interest_taxes' => null,
        'earning_before_interest_taxes_usd' => null,
        'earnings_before_interest_taxes_depreciation_amortization' => null,
        'earnings_before_interest_taxes_depreciation_amortization_usd' => null,
        'earnings_before_tax' => null,
        'earnings_per_basic_share' => 'double',
        'earnings_per_basic_share_usd' => 'double',
        'earnings_per_diluted_share' => 'double',
        'effect_of_exchange_rate_changes_on_cash' => null,
        'enterprise_value' => null,
        'enterprise_value_over_ebit' => null,
        'enterprise_value_over_ebitda' => 'double',
        'foreign_currency_usd_exchange_rate' => null,
        'free_cash_flow' => null,
        'free_cash_flow_per_share' => 'double',
        'goodwill_and_intangible_assets' => null,
        'gross_margin' => 'double',
        'gross_profit' => null,
        'income_tax_expense' => null,
        'interest_expense' => null,
        'inventory' => null,
        'invested_capital' => null,
        'invested_capital_average' => null,
        'investments' => null,
        'investments_current' => null,
        'investments_non_current' => null,
        'issuance_debt_securities' => null,
        'issuance_equity_shares' => null,
        'liabilities_non_current' => null,
        'market_capitalization' => null,
        'net_cash_flow' => null,
        'net_cash_flow_business_acquisitions_disposals' => null,
        'net_cash_flow_from_financing' => null,
        'net_cash_flow_from_investing' => null,
        'net_cash_flow_from_operations' => null,
        'net_cash_flow_investment_acquisitions_disposals' => null,
        'net_income' => null,
        'net_income_common_stock' => null,
        'net_income_common_stock_usd' => null,
        'net_income_to_non_controlling_interests' => null,
        'net_loss_income_from_discontinued_operations' => null,
        'operating_expenses' => null,
        'operating_income' => null,
        'payment_dividends_other_cash_distributions' => null,
        'payout_ratio' => null,
        'period' => null,
        'preferred_dividends_income_statement_impact' => null,
        'price_earnings' => 'double',
        'price_sales' => 'double',
        'price_to_book_value' => 'double',
        'price_to_earnings_ratio' => 'double',
        'price_to_sales_ratio' => 'double',
        'profit_margin' => 'double',
        'property_plant_equipment_net' => null,
        'report_period' => 'date-time',
        'research_and_development_expense' => null,
        'return_on_average_assets' => null,
        'return_on_average_equity' => null,
        'return_on_invested_capital' => null,
        'return_on_sales' => 'double',
        'revenues' => null,
        'revenues_usd' => null,
        'sales_per_share' => 'double',
        'selling_general_and_administrative_expense' => null,
        'share_based_compensation' => null,
        'share_factor' => null,
        'share_price_adjusted_close' => 'double',
        'shareholders_equity' => null,
        'shareholders_equity_usd' => null,
        'shares' => null,
        'tangible_asset_value' => null,
        'tangible_assets_book_value_per_share' => 'double',
        'tax_assets' => null,
        'tax_liabilities' => null,
        'ticker' => null,
        'total_liabilities' => null,
        'trade_and_non_trade_payables' => null,
        'trade_and_non_trade_receivables' => null,
        'updated' => 'date-time',
        'weighted_average_shares' => null,
        'weighted_average_shares_diluted' => null,
        'working_capital' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ebitda_margin' => false,
        'accumulated_other_comprehensive_income' => false,
        'accumulated_retained_earnings_deficit' => false,
        'asset_turnover' => false,
        'assets' => false,
        'assets_average' => false,
        'assets_current' => false,
        'assets_non_current' => false,
        'average_equity' => false,
        'book_value_per_share' => false,
        'calendar_date' => false,
        'capital_expenditure' => false,
        'cash_and_equivalents' => false,
        'cash_and_equivalents_usd' => false,
        'consolidated_income' => false,
        'cost_of_revenue' => false,
        'current_liabilities' => false,
        'current_ratio' => false,
        'debt' => false,
        'debt_current' => false,
        'debt_non_current' => false,
        'debt_to_equity_ratio' => false,
        'debt_usd' => false,
        'deferred_revenue' => false,
        'deposits' => false,
        'depreciation_amortization_and_accretion' => false,
        'dividend_yield' => false,
        'dividends_per_basic_common_share' => false,
        'earning_before_interest_taxes' => false,
        'earning_before_interest_taxes_usd' => false,
        'earnings_before_interest_taxes_depreciation_amortization' => false,
        'earnings_before_interest_taxes_depreciation_amortization_usd' => false,
        'earnings_before_tax' => false,
        'earnings_per_basic_share' => false,
        'earnings_per_basic_share_usd' => false,
        'earnings_per_diluted_share' => false,
        'effect_of_exchange_rate_changes_on_cash' => false,
        'enterprise_value' => false,
        'enterprise_value_over_ebit' => false,
        'enterprise_value_over_ebitda' => false,
        'foreign_currency_usd_exchange_rate' => false,
        'free_cash_flow' => false,
        'free_cash_flow_per_share' => false,
        'goodwill_and_intangible_assets' => false,
        'gross_margin' => false,
        'gross_profit' => false,
        'income_tax_expense' => false,
        'interest_expense' => false,
        'inventory' => false,
        'invested_capital' => false,
        'invested_capital_average' => false,
        'investments' => false,
        'investments_current' => false,
        'investments_non_current' => false,
        'issuance_debt_securities' => false,
        'issuance_equity_shares' => false,
        'liabilities_non_current' => false,
        'market_capitalization' => false,
        'net_cash_flow' => false,
        'net_cash_flow_business_acquisitions_disposals' => false,
        'net_cash_flow_from_financing' => false,
        'net_cash_flow_from_investing' => false,
        'net_cash_flow_from_operations' => false,
        'net_cash_flow_investment_acquisitions_disposals' => false,
        'net_income' => false,
        'net_income_common_stock' => false,
        'net_income_common_stock_usd' => false,
        'net_income_to_non_controlling_interests' => false,
        'net_loss_income_from_discontinued_operations' => false,
        'operating_expenses' => false,
        'operating_income' => false,
        'payment_dividends_other_cash_distributions' => false,
        'payout_ratio' => false,
        'period' => false,
        'preferred_dividends_income_statement_impact' => false,
        'price_earnings' => false,
        'price_sales' => false,
        'price_to_book_value' => false,
        'price_to_earnings_ratio' => false,
        'price_to_sales_ratio' => false,
        'profit_margin' => false,
        'property_plant_equipment_net' => false,
        'report_period' => false,
        'research_and_development_expense' => false,
        'return_on_average_assets' => false,
        'return_on_average_equity' => false,
        'return_on_invested_capital' => false,
        'return_on_sales' => false,
        'revenues' => false,
        'revenues_usd' => false,
        'sales_per_share' => false,
        'selling_general_and_administrative_expense' => false,
        'share_based_compensation' => false,
        'share_factor' => false,
        'share_price_adjusted_close' => false,
        'shareholders_equity' => false,
        'shareholders_equity_usd' => false,
        'shares' => false,
        'tangible_asset_value' => false,
        'tangible_assets_book_value_per_share' => false,
        'tax_assets' => false,
        'tax_liabilities' => false,
        'ticker' => false,
        'total_liabilities' => false,
        'trade_and_non_trade_payables' => false,
        'trade_and_non_trade_receivables' => false,
        'updated' => false,
        'weighted_average_shares' => false,
        'weighted_average_shares_diluted' => false,
        'working_capital' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ebitda_margin' => 'EBITDAMargin',
        'accumulated_other_comprehensive_income' => 'accumulatedOtherComprehensiveIncome',
        'accumulated_retained_earnings_deficit' => 'accumulatedRetainedEarningsDeficit',
        'asset_turnover' => 'assetTurnover',
        'assets' => 'assets',
        'assets_average' => 'assetsAverage',
        'assets_current' => 'assetsCurrent',
        'assets_non_current' => 'assetsNonCurrent',
        'average_equity' => 'averageEquity',
        'book_value_per_share' => 'bookValuePerShare',
        'calendar_date' => 'calendarDate',
        'capital_expenditure' => 'capitalExpenditure',
        'cash_and_equivalents' => 'cashAndEquivalents',
        'cash_and_equivalents_usd' => 'cashAndEquivalentsUSD',
        'consolidated_income' => 'consolidatedIncome',
        'cost_of_revenue' => 'costOfRevenue',
        'current_liabilities' => 'currentLiabilities',
        'current_ratio' => 'currentRatio',
        'debt' => 'debt',
        'debt_current' => 'debtCurrent',
        'debt_non_current' => 'debtNonCurrent',
        'debt_to_equity_ratio' => 'debtToEquityRatio',
        'debt_usd' => 'debtUSD',
        'deferred_revenue' => 'deferredRevenue',
        'deposits' => 'deposits',
        'depreciation_amortization_and_accretion' => 'depreciationAmortizationAndAccretion',
        'dividend_yield' => 'dividendYield',
        'dividends_per_basic_common_share' => 'dividendsPerBasicCommonShare',
        'earning_before_interest_taxes' => 'earningBeforeInterestTaxes',
        'earning_before_interest_taxes_usd' => 'earningBeforeInterestTaxesUSD',
        'earnings_before_interest_taxes_depreciation_amortization' => 'earningsBeforeInterestTaxesDepreciationAmortization',
        'earnings_before_interest_taxes_depreciation_amortization_usd' => 'earningsBeforeInterestTaxesDepreciationAmortizationUSD',
        'earnings_before_tax' => 'earningsBeforeTax',
        'earnings_per_basic_share' => 'earningsPerBasicShare',
        'earnings_per_basic_share_usd' => 'earningsPerBasicShareUSD',
        'earnings_per_diluted_share' => 'earningsPerDilutedShare',
        'effect_of_exchange_rate_changes_on_cash' => 'effectOfExchangeRateChangesOnCash',
        'enterprise_value' => 'enterpriseValue',
        'enterprise_value_over_ebit' => 'enterpriseValueOverEBIT',
        'enterprise_value_over_ebitda' => 'enterpriseValueOverEBITDA',
        'foreign_currency_usd_exchange_rate' => 'foreignCurrencyUSDExchangeRate',
        'free_cash_flow' => 'freeCashFlow',
        'free_cash_flow_per_share' => 'freeCashFlowPerShare',
        'goodwill_and_intangible_assets' => 'goodwillAndIntangibleAssets',
        'gross_margin' => 'grossMargin',
        'gross_profit' => 'grossProfit',
        'income_tax_expense' => 'incomeTaxExpense',
        'interest_expense' => 'interestExpense',
        'inventory' => 'inventory',
        'invested_capital' => 'investedCapital',
        'invested_capital_average' => 'investedCapitalAverage',
        'investments' => 'investments',
        'investments_current' => 'investmentsCurrent',
        'investments_non_current' => 'investmentsNonCurrent',
        'issuance_debt_securities' => 'issuanceDebtSecurities',
        'issuance_equity_shares' => 'issuanceEquityShares',
        'liabilities_non_current' => 'liabilitiesNonCurrent',
        'market_capitalization' => 'marketCapitalization',
        'net_cash_flow' => 'netCashFlow',
        'net_cash_flow_business_acquisitions_disposals' => 'netCashFlowBusinessAcquisitionsDisposals',
        'net_cash_flow_from_financing' => 'netCashFlowFromFinancing',
        'net_cash_flow_from_investing' => 'netCashFlowFromInvesting',
        'net_cash_flow_from_operations' => 'netCashFlowFromOperations',
        'net_cash_flow_investment_acquisitions_disposals' => 'netCashFlowInvestmentAcquisitionsDisposals',
        'net_income' => 'netIncome',
        'net_income_common_stock' => 'netIncomeCommonStock',
        'net_income_common_stock_usd' => 'netIncomeCommonStockUSD',
        'net_income_to_non_controlling_interests' => 'netIncomeToNonControllingInterests',
        'net_loss_income_from_discontinued_operations' => 'netLossIncomeFromDiscontinuedOperations',
        'operating_expenses' => 'operatingExpenses',
        'operating_income' => 'operatingIncome',
        'payment_dividends_other_cash_distributions' => 'paymentDividendsOtherCashDistributions',
        'payout_ratio' => 'payoutRatio',
        'period' => 'period',
        'preferred_dividends_income_statement_impact' => 'preferredDividendsIncomeStatementImpact',
        'price_earnings' => 'priceEarnings',
        'price_sales' => 'priceSales',
        'price_to_book_value' => 'priceToBookValue',
        'price_to_earnings_ratio' => 'priceToEarningsRatio',
        'price_to_sales_ratio' => 'priceToSalesRatio',
        'profit_margin' => 'profitMargin',
        'property_plant_equipment_net' => 'propertyPlantEquipmentNet',
        'report_period' => 'reportPeriod',
        'research_and_development_expense' => 'researchAndDevelopmentExpense',
        'return_on_average_assets' => 'returnOnAverageAssets',
        'return_on_average_equity' => 'returnOnAverageEquity',
        'return_on_invested_capital' => 'returnOnInvestedCapital',
        'return_on_sales' => 'returnOnSales',
        'revenues' => 'revenues',
        'revenues_usd' => 'revenuesUSD',
        'sales_per_share' => 'salesPerShare',
        'selling_general_and_administrative_expense' => 'sellingGeneralAndAdministrativeExpense',
        'share_based_compensation' => 'shareBasedCompensation',
        'share_factor' => 'shareFactor',
        'share_price_adjusted_close' => 'sharePriceAdjustedClose',
        'shareholders_equity' => 'shareholdersEquity',
        'shareholders_equity_usd' => 'shareholdersEquityUSD',
        'shares' => 'shares',
        'tangible_asset_value' => 'tangibleAssetValue',
        'tangible_assets_book_value_per_share' => 'tangibleAssetsBookValuePerShare',
        'tax_assets' => 'taxAssets',
        'tax_liabilities' => 'taxLiabilities',
        'ticker' => 'ticker',
        'total_liabilities' => 'totalLiabilities',
        'trade_and_non_trade_payables' => 'tradeAndNonTradePayables',
        'trade_and_non_trade_receivables' => 'tradeAndNonTradeReceivables',
        'updated' => 'updated',
        'weighted_average_shares' => 'weightedAverageShares',
        'weighted_average_shares_diluted' => 'weightedAverageSharesDiluted',
        'working_capital' => 'workingCapital'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ebitda_margin' => 'setEbitdaMargin',
        'accumulated_other_comprehensive_income' => 'setAccumulatedOtherComprehensiveIncome',
        'accumulated_retained_earnings_deficit' => 'setAccumulatedRetainedEarningsDeficit',
        'asset_turnover' => 'setAssetTurnover',
        'assets' => 'setAssets',
        'assets_average' => 'setAssetsAverage',
        'assets_current' => 'setAssetsCurrent',
        'assets_non_current' => 'setAssetsNonCurrent',
        'average_equity' => 'setAverageEquity',
        'book_value_per_share' => 'setBookValuePerShare',
        'calendar_date' => 'setCalendarDate',
        'capital_expenditure' => 'setCapitalExpenditure',
        'cash_and_equivalents' => 'setCashAndEquivalents',
        'cash_and_equivalents_usd' => 'setCashAndEquivalentsUsd',
        'consolidated_income' => 'setConsolidatedIncome',
        'cost_of_revenue' => 'setCostOfRevenue',
        'current_liabilities' => 'setCurrentLiabilities',
        'current_ratio' => 'setCurrentRatio',
        'debt' => 'setDebt',
        'debt_current' => 'setDebtCurrent',
        'debt_non_current' => 'setDebtNonCurrent',
        'debt_to_equity_ratio' => 'setDebtToEquityRatio',
        'debt_usd' => 'setDebtUsd',
        'deferred_revenue' => 'setDeferredRevenue',
        'deposits' => 'setDeposits',
        'depreciation_amortization_and_accretion' => 'setDepreciationAmortizationAndAccretion',
        'dividend_yield' => 'setDividendYield',
        'dividends_per_basic_common_share' => 'setDividendsPerBasicCommonShare',
        'earning_before_interest_taxes' => 'setEarningBeforeInterestTaxes',
        'earning_before_interest_taxes_usd' => 'setEarningBeforeInterestTaxesUsd',
        'earnings_before_interest_taxes_depreciation_amortization' => 'setEarningsBeforeInterestTaxesDepreciationAmortization',
        'earnings_before_interest_taxes_depreciation_amortization_usd' => 'setEarningsBeforeInterestTaxesDepreciationAmortizationUsd',
        'earnings_before_tax' => 'setEarningsBeforeTax',
        'earnings_per_basic_share' => 'setEarningsPerBasicShare',
        'earnings_per_basic_share_usd' => 'setEarningsPerBasicShareUsd',
        'earnings_per_diluted_share' => 'setEarningsPerDilutedShare',
        'effect_of_exchange_rate_changes_on_cash' => 'setEffectOfExchangeRateChangesOnCash',
        'enterprise_value' => 'setEnterpriseValue',
        'enterprise_value_over_ebit' => 'setEnterpriseValueOverEbit',
        'enterprise_value_over_ebitda' => 'setEnterpriseValueOverEbitda',
        'foreign_currency_usd_exchange_rate' => 'setForeignCurrencyUsdExchangeRate',
        'free_cash_flow' => 'setFreeCashFlow',
        'free_cash_flow_per_share' => 'setFreeCashFlowPerShare',
        'goodwill_and_intangible_assets' => 'setGoodwillAndIntangibleAssets',
        'gross_margin' => 'setGrossMargin',
        'gross_profit' => 'setGrossProfit',
        'income_tax_expense' => 'setIncomeTaxExpense',
        'interest_expense' => 'setInterestExpense',
        'inventory' => 'setInventory',
        'invested_capital' => 'setInvestedCapital',
        'invested_capital_average' => 'setInvestedCapitalAverage',
        'investments' => 'setInvestments',
        'investments_current' => 'setInvestmentsCurrent',
        'investments_non_current' => 'setInvestmentsNonCurrent',
        'issuance_debt_securities' => 'setIssuanceDebtSecurities',
        'issuance_equity_shares' => 'setIssuanceEquityShares',
        'liabilities_non_current' => 'setLiabilitiesNonCurrent',
        'market_capitalization' => 'setMarketCapitalization',
        'net_cash_flow' => 'setNetCashFlow',
        'net_cash_flow_business_acquisitions_disposals' => 'setNetCashFlowBusinessAcquisitionsDisposals',
        'net_cash_flow_from_financing' => 'setNetCashFlowFromFinancing',
        'net_cash_flow_from_investing' => 'setNetCashFlowFromInvesting',
        'net_cash_flow_from_operations' => 'setNetCashFlowFromOperations',
        'net_cash_flow_investment_acquisitions_disposals' => 'setNetCashFlowInvestmentAcquisitionsDisposals',
        'net_income' => 'setNetIncome',
        'net_income_common_stock' => 'setNetIncomeCommonStock',
        'net_income_common_stock_usd' => 'setNetIncomeCommonStockUsd',
        'net_income_to_non_controlling_interests' => 'setNetIncomeToNonControllingInterests',
        'net_loss_income_from_discontinued_operations' => 'setNetLossIncomeFromDiscontinuedOperations',
        'operating_expenses' => 'setOperatingExpenses',
        'operating_income' => 'setOperatingIncome',
        'payment_dividends_other_cash_distributions' => 'setPaymentDividendsOtherCashDistributions',
        'payout_ratio' => 'setPayoutRatio',
        'period' => 'setPeriod',
        'preferred_dividends_income_statement_impact' => 'setPreferredDividendsIncomeStatementImpact',
        'price_earnings' => 'setPriceEarnings',
        'price_sales' => 'setPriceSales',
        'price_to_book_value' => 'setPriceToBookValue',
        'price_to_earnings_ratio' => 'setPriceToEarningsRatio',
        'price_to_sales_ratio' => 'setPriceToSalesRatio',
        'profit_margin' => 'setProfitMargin',
        'property_plant_equipment_net' => 'setPropertyPlantEquipmentNet',
        'report_period' => 'setReportPeriod',
        'research_and_development_expense' => 'setResearchAndDevelopmentExpense',
        'return_on_average_assets' => 'setReturnOnAverageAssets',
        'return_on_average_equity' => 'setReturnOnAverageEquity',
        'return_on_invested_capital' => 'setReturnOnInvestedCapital',
        'return_on_sales' => 'setReturnOnSales',
        'revenues' => 'setRevenues',
        'revenues_usd' => 'setRevenuesUsd',
        'sales_per_share' => 'setSalesPerShare',
        'selling_general_and_administrative_expense' => 'setSellingGeneralAndAdministrativeExpense',
        'share_based_compensation' => 'setShareBasedCompensation',
        'share_factor' => 'setShareFactor',
        'share_price_adjusted_close' => 'setSharePriceAdjustedClose',
        'shareholders_equity' => 'setShareholdersEquity',
        'shareholders_equity_usd' => 'setShareholdersEquityUsd',
        'shares' => 'setShares',
        'tangible_asset_value' => 'setTangibleAssetValue',
        'tangible_assets_book_value_per_share' => 'setTangibleAssetsBookValuePerShare',
        'tax_assets' => 'setTaxAssets',
        'tax_liabilities' => 'setTaxLiabilities',
        'ticker' => 'setTicker',
        'total_liabilities' => 'setTotalLiabilities',
        'trade_and_non_trade_payables' => 'setTradeAndNonTradePayables',
        'trade_and_non_trade_receivables' => 'setTradeAndNonTradeReceivables',
        'updated' => 'setUpdated',
        'weighted_average_shares' => 'setWeightedAverageShares',
        'weighted_average_shares_diluted' => 'setWeightedAverageSharesDiluted',
        'working_capital' => 'setWorkingCapital'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ebitda_margin' => 'getEbitdaMargin',
        'accumulated_other_comprehensive_income' => 'getAccumulatedOtherComprehensiveIncome',
        'accumulated_retained_earnings_deficit' => 'getAccumulatedRetainedEarningsDeficit',
        'asset_turnover' => 'getAssetTurnover',
        'assets' => 'getAssets',
        'assets_average' => 'getAssetsAverage',
        'assets_current' => 'getAssetsCurrent',
        'assets_non_current' => 'getAssetsNonCurrent',
        'average_equity' => 'getAverageEquity',
        'book_value_per_share' => 'getBookValuePerShare',
        'calendar_date' => 'getCalendarDate',
        'capital_expenditure' => 'getCapitalExpenditure',
        'cash_and_equivalents' => 'getCashAndEquivalents',
        'cash_and_equivalents_usd' => 'getCashAndEquivalentsUsd',
        'consolidated_income' => 'getConsolidatedIncome',
        'cost_of_revenue' => 'getCostOfRevenue',
        'current_liabilities' => 'getCurrentLiabilities',
        'current_ratio' => 'getCurrentRatio',
        'debt' => 'getDebt',
        'debt_current' => 'getDebtCurrent',
        'debt_non_current' => 'getDebtNonCurrent',
        'debt_to_equity_ratio' => 'getDebtToEquityRatio',
        'debt_usd' => 'getDebtUsd',
        'deferred_revenue' => 'getDeferredRevenue',
        'deposits' => 'getDeposits',
        'depreciation_amortization_and_accretion' => 'getDepreciationAmortizationAndAccretion',
        'dividend_yield' => 'getDividendYield',
        'dividends_per_basic_common_share' => 'getDividendsPerBasicCommonShare',
        'earning_before_interest_taxes' => 'getEarningBeforeInterestTaxes',
        'earning_before_interest_taxes_usd' => 'getEarningBeforeInterestTaxesUsd',
        'earnings_before_interest_taxes_depreciation_amortization' => 'getEarningsBeforeInterestTaxesDepreciationAmortization',
        'earnings_before_interest_taxes_depreciation_amortization_usd' => 'getEarningsBeforeInterestTaxesDepreciationAmortizationUsd',
        'earnings_before_tax' => 'getEarningsBeforeTax',
        'earnings_per_basic_share' => 'getEarningsPerBasicShare',
        'earnings_per_basic_share_usd' => 'getEarningsPerBasicShareUsd',
        'earnings_per_diluted_share' => 'getEarningsPerDilutedShare',
        'effect_of_exchange_rate_changes_on_cash' => 'getEffectOfExchangeRateChangesOnCash',
        'enterprise_value' => 'getEnterpriseValue',
        'enterprise_value_over_ebit' => 'getEnterpriseValueOverEbit',
        'enterprise_value_over_ebitda' => 'getEnterpriseValueOverEbitda',
        'foreign_currency_usd_exchange_rate' => 'getForeignCurrencyUsdExchangeRate',
        'free_cash_flow' => 'getFreeCashFlow',
        'free_cash_flow_per_share' => 'getFreeCashFlowPerShare',
        'goodwill_and_intangible_assets' => 'getGoodwillAndIntangibleAssets',
        'gross_margin' => 'getGrossMargin',
        'gross_profit' => 'getGrossProfit',
        'income_tax_expense' => 'getIncomeTaxExpense',
        'interest_expense' => 'getInterestExpense',
        'inventory' => 'getInventory',
        'invested_capital' => 'getInvestedCapital',
        'invested_capital_average' => 'getInvestedCapitalAverage',
        'investments' => 'getInvestments',
        'investments_current' => 'getInvestmentsCurrent',
        'investments_non_current' => 'getInvestmentsNonCurrent',
        'issuance_debt_securities' => 'getIssuanceDebtSecurities',
        'issuance_equity_shares' => 'getIssuanceEquityShares',
        'liabilities_non_current' => 'getLiabilitiesNonCurrent',
        'market_capitalization' => 'getMarketCapitalization',
        'net_cash_flow' => 'getNetCashFlow',
        'net_cash_flow_business_acquisitions_disposals' => 'getNetCashFlowBusinessAcquisitionsDisposals',
        'net_cash_flow_from_financing' => 'getNetCashFlowFromFinancing',
        'net_cash_flow_from_investing' => 'getNetCashFlowFromInvesting',
        'net_cash_flow_from_operations' => 'getNetCashFlowFromOperations',
        'net_cash_flow_investment_acquisitions_disposals' => 'getNetCashFlowInvestmentAcquisitionsDisposals',
        'net_income' => 'getNetIncome',
        'net_income_common_stock' => 'getNetIncomeCommonStock',
        'net_income_common_stock_usd' => 'getNetIncomeCommonStockUsd',
        'net_income_to_non_controlling_interests' => 'getNetIncomeToNonControllingInterests',
        'net_loss_income_from_discontinued_operations' => 'getNetLossIncomeFromDiscontinuedOperations',
        'operating_expenses' => 'getOperatingExpenses',
        'operating_income' => 'getOperatingIncome',
        'payment_dividends_other_cash_distributions' => 'getPaymentDividendsOtherCashDistributions',
        'payout_ratio' => 'getPayoutRatio',
        'period' => 'getPeriod',
        'preferred_dividends_income_statement_impact' => 'getPreferredDividendsIncomeStatementImpact',
        'price_earnings' => 'getPriceEarnings',
        'price_sales' => 'getPriceSales',
        'price_to_book_value' => 'getPriceToBookValue',
        'price_to_earnings_ratio' => 'getPriceToEarningsRatio',
        'price_to_sales_ratio' => 'getPriceToSalesRatio',
        'profit_margin' => 'getProfitMargin',
        'property_plant_equipment_net' => 'getPropertyPlantEquipmentNet',
        'report_period' => 'getReportPeriod',
        'research_and_development_expense' => 'getResearchAndDevelopmentExpense',
        'return_on_average_assets' => 'getReturnOnAverageAssets',
        'return_on_average_equity' => 'getReturnOnAverageEquity',
        'return_on_invested_capital' => 'getReturnOnInvestedCapital',
        'return_on_sales' => 'getReturnOnSales',
        'revenues' => 'getRevenues',
        'revenues_usd' => 'getRevenuesUsd',
        'sales_per_share' => 'getSalesPerShare',
        'selling_general_and_administrative_expense' => 'getSellingGeneralAndAdministrativeExpense',
        'share_based_compensation' => 'getShareBasedCompensation',
        'share_factor' => 'getShareFactor',
        'share_price_adjusted_close' => 'getSharePriceAdjustedClose',
        'shareholders_equity' => 'getShareholdersEquity',
        'shareholders_equity_usd' => 'getShareholdersEquityUsd',
        'shares' => 'getShares',
        'tangible_asset_value' => 'getTangibleAssetValue',
        'tangible_assets_book_value_per_share' => 'getTangibleAssetsBookValuePerShare',
        'tax_assets' => 'getTaxAssets',
        'tax_liabilities' => 'getTaxLiabilities',
        'ticker' => 'getTicker',
        'total_liabilities' => 'getTotalLiabilities',
        'trade_and_non_trade_payables' => 'getTradeAndNonTradePayables',
        'trade_and_non_trade_receivables' => 'getTradeAndNonTradeReceivables',
        'updated' => 'getUpdated',
        'weighted_average_shares' => 'getWeightedAverageShares',
        'weighted_average_shares_diluted' => 'getWeightedAverageSharesDiluted',
        'working_capital' => 'getWorkingCapital'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PERIOD_Q = 'Q';
    public const PERIOD_T = 'T';
    public const PERIOD_QA = 'QA';
    public const PERIOD_TA = 'TA';
    public const PERIOD_Y = 'Y';
    public const PERIOD_YA = 'YA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_Q,
            self::PERIOD_T,
            self::PERIOD_QA,
            self::PERIOD_TA,
            self::PERIOD_Y,
            self::PERIOD_YA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ebitda_margin', $data ?? [], null);
        $this->setIfExists('accumulated_other_comprehensive_income', $data ?? [], null);
        $this->setIfExists('accumulated_retained_earnings_deficit', $data ?? [], null);
        $this->setIfExists('asset_turnover', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('assets_average', $data ?? [], null);
        $this->setIfExists('assets_current', $data ?? [], null);
        $this->setIfExists('assets_non_current', $data ?? [], null);
        $this->setIfExists('average_equity', $data ?? [], null);
        $this->setIfExists('book_value_per_share', $data ?? [], null);
        $this->setIfExists('calendar_date', $data ?? [], null);
        $this->setIfExists('capital_expenditure', $data ?? [], null);
        $this->setIfExists('cash_and_equivalents', $data ?? [], null);
        $this->setIfExists('cash_and_equivalents_usd', $data ?? [], null);
        $this->setIfExists('consolidated_income', $data ?? [], null);
        $this->setIfExists('cost_of_revenue', $data ?? [], null);
        $this->setIfExists('current_liabilities', $data ?? [], null);
        $this->setIfExists('current_ratio', $data ?? [], null);
        $this->setIfExists('debt', $data ?? [], null);
        $this->setIfExists('debt_current', $data ?? [], null);
        $this->setIfExists('debt_non_current', $data ?? [], null);
        $this->setIfExists('debt_to_equity_ratio', $data ?? [], null);
        $this->setIfExists('debt_usd', $data ?? [], null);
        $this->setIfExists('deferred_revenue', $data ?? [], null);
        $this->setIfExists('deposits', $data ?? [], null);
        $this->setIfExists('depreciation_amortization_and_accretion', $data ?? [], null);
        $this->setIfExists('dividend_yield', $data ?? [], null);
        $this->setIfExists('dividends_per_basic_common_share', $data ?? [], null);
        $this->setIfExists('earning_before_interest_taxes', $data ?? [], null);
        $this->setIfExists('earning_before_interest_taxes_usd', $data ?? [], null);
        $this->setIfExists('earnings_before_interest_taxes_depreciation_amortization', $data ?? [], null);
        $this->setIfExists('earnings_before_interest_taxes_depreciation_amortization_usd', $data ?? [], null);
        $this->setIfExists('earnings_before_tax', $data ?? [], null);
        $this->setIfExists('earnings_per_basic_share', $data ?? [], null);
        $this->setIfExists('earnings_per_basic_share_usd', $data ?? [], null);
        $this->setIfExists('earnings_per_diluted_share', $data ?? [], null);
        $this->setIfExists('effect_of_exchange_rate_changes_on_cash', $data ?? [], null);
        $this->setIfExists('enterprise_value', $data ?? [], null);
        $this->setIfExists('enterprise_value_over_ebit', $data ?? [], null);
        $this->setIfExists('enterprise_value_over_ebitda', $data ?? [], null);
        $this->setIfExists('foreign_currency_usd_exchange_rate', $data ?? [], null);
        $this->setIfExists('free_cash_flow', $data ?? [], null);
        $this->setIfExists('free_cash_flow_per_share', $data ?? [], null);
        $this->setIfExists('goodwill_and_intangible_assets', $data ?? [], null);
        $this->setIfExists('gross_margin', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('income_tax_expense', $data ?? [], null);
        $this->setIfExists('interest_expense', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('invested_capital', $data ?? [], null);
        $this->setIfExists('invested_capital_average', $data ?? [], null);
        $this->setIfExists('investments', $data ?? [], null);
        $this->setIfExists('investments_current', $data ?? [], null);
        $this->setIfExists('investments_non_current', $data ?? [], null);
        $this->setIfExists('issuance_debt_securities', $data ?? [], null);
        $this->setIfExists('issuance_equity_shares', $data ?? [], null);
        $this->setIfExists('liabilities_non_current', $data ?? [], null);
        $this->setIfExists('market_capitalization', $data ?? [], null);
        $this->setIfExists('net_cash_flow', $data ?? [], null);
        $this->setIfExists('net_cash_flow_business_acquisitions_disposals', $data ?? [], null);
        $this->setIfExists('net_cash_flow_from_financing', $data ?? [], null);
        $this->setIfExists('net_cash_flow_from_investing', $data ?? [], null);
        $this->setIfExists('net_cash_flow_from_operations', $data ?? [], null);
        $this->setIfExists('net_cash_flow_investment_acquisitions_disposals', $data ?? [], null);
        $this->setIfExists('net_income', $data ?? [], null);
        $this->setIfExists('net_income_common_stock', $data ?? [], null);
        $this->setIfExists('net_income_common_stock_usd', $data ?? [], null);
        $this->setIfExists('net_income_to_non_controlling_interests', $data ?? [], null);
        $this->setIfExists('net_loss_income_from_discontinued_operations', $data ?? [], null);
        $this->setIfExists('operating_expenses', $data ?? [], null);
        $this->setIfExists('operating_income', $data ?? [], null);
        $this->setIfExists('payment_dividends_other_cash_distributions', $data ?? [], null);
        $this->setIfExists('payout_ratio', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('preferred_dividends_income_statement_impact', $data ?? [], null);
        $this->setIfExists('price_earnings', $data ?? [], null);
        $this->setIfExists('price_sales', $data ?? [], null);
        $this->setIfExists('price_to_book_value', $data ?? [], null);
        $this->setIfExists('price_to_earnings_ratio', $data ?? [], null);
        $this->setIfExists('price_to_sales_ratio', $data ?? [], null);
        $this->setIfExists('profit_margin', $data ?? [], null);
        $this->setIfExists('property_plant_equipment_net', $data ?? [], null);
        $this->setIfExists('report_period', $data ?? [], null);
        $this->setIfExists('research_and_development_expense', $data ?? [], null);
        $this->setIfExists('return_on_average_assets', $data ?? [], null);
        $this->setIfExists('return_on_average_equity', $data ?? [], null);
        $this->setIfExists('return_on_invested_capital', $data ?? [], null);
        $this->setIfExists('return_on_sales', $data ?? [], null);
        $this->setIfExists('revenues', $data ?? [], null);
        $this->setIfExists('revenues_usd', $data ?? [], null);
        $this->setIfExists('sales_per_share', $data ?? [], null);
        $this->setIfExists('selling_general_and_administrative_expense', $data ?? [], null);
        $this->setIfExists('share_based_compensation', $data ?? [], null);
        $this->setIfExists('share_factor', $data ?? [], null);
        $this->setIfExists('share_price_adjusted_close', $data ?? [], null);
        $this->setIfExists('shareholders_equity', $data ?? [], null);
        $this->setIfExists('shareholders_equity_usd', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('tangible_asset_value', $data ?? [], null);
        $this->setIfExists('tangible_assets_book_value_per_share', $data ?? [], null);
        $this->setIfExists('tax_assets', $data ?? [], null);
        $this->setIfExists('tax_liabilities', $data ?? [], null);
        $this->setIfExists('ticker', $data ?? [], null);
        $this->setIfExists('total_liabilities', $data ?? [], null);
        $this->setIfExists('trade_and_non_trade_payables', $data ?? [], null);
        $this->setIfExists('trade_and_non_trade_receivables', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('weighted_average_shares', $data ?? [], null);
        $this->setIfExists('weighted_average_shares_diluted', $data ?? [], null);
        $this->setIfExists('working_capital', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPeriodAllowableValues();
        if (!is_null($this->container['period']) && !in_array($this->container['period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'period', must be one of '%s'",
                $this->container['period'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ticker'] === null) {
            $invalidProperties[] = "'ticker' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ebitda_margin
     *
     * @return float|null
     */
    public function getEbitdaMargin()
    {
        return $this->container['ebitda_margin'];
    }

    /**
     * Sets ebitda_margin
     *
     * @param float|null $ebitda_margin ebitda_margin
     *
     * @return self
     */
    public function setEbitdaMargin($ebitda_margin)
    {
        if (is_null($ebitda_margin)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin cannot be null');
        }
        $this->container['ebitda_margin'] = $ebitda_margin;

        return $this;
    }

    /**
     * Gets accumulated_other_comprehensive_income
     *
     * @return int|null
     */
    public function getAccumulatedOtherComprehensiveIncome()
    {
        return $this->container['accumulated_other_comprehensive_income'];
    }

    /**
     * Sets accumulated_other_comprehensive_income
     *
     * @param int|null $accumulated_other_comprehensive_income accumulated_other_comprehensive_income
     *
     * @return self
     */
    public function setAccumulatedOtherComprehensiveIncome($accumulated_other_comprehensive_income)
    {
        if (is_null($accumulated_other_comprehensive_income)) {
            throw new \InvalidArgumentException('non-nullable accumulated_other_comprehensive_income cannot be null');
        }
        $this->container['accumulated_other_comprehensive_income'] = $accumulated_other_comprehensive_income;

        return $this;
    }

    /**
     * Gets accumulated_retained_earnings_deficit
     *
     * @return int|null
     */
    public function getAccumulatedRetainedEarningsDeficit()
    {
        return $this->container['accumulated_retained_earnings_deficit'];
    }

    /**
     * Sets accumulated_retained_earnings_deficit
     *
     * @param int|null $accumulated_retained_earnings_deficit accumulated_retained_earnings_deficit
     *
     * @return self
     */
    public function setAccumulatedRetainedEarningsDeficit($accumulated_retained_earnings_deficit)
    {
        if (is_null($accumulated_retained_earnings_deficit)) {
            throw new \InvalidArgumentException('non-nullable accumulated_retained_earnings_deficit cannot be null');
        }
        $this->container['accumulated_retained_earnings_deficit'] = $accumulated_retained_earnings_deficit;

        return $this;
    }

    /**
     * Gets asset_turnover
     *
     * @return int|null
     */
    public function getAssetTurnover()
    {
        return $this->container['asset_turnover'];
    }

    /**
     * Sets asset_turnover
     *
     * @param int|null $asset_turnover asset_turnover
     *
     * @return self
     */
    public function setAssetTurnover($asset_turnover)
    {
        if (is_null($asset_turnover)) {
            throw new \InvalidArgumentException('non-nullable asset_turnover cannot be null');
        }
        $this->container['asset_turnover'] = $asset_turnover;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return int|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param int|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets assets_average
     *
     * @return int|null
     */
    public function getAssetsAverage()
    {
        return $this->container['assets_average'];
    }

    /**
     * Sets assets_average
     *
     * @param int|null $assets_average assets_average
     *
     * @return self
     */
    public function setAssetsAverage($assets_average)
    {
        if (is_null($assets_average)) {
            throw new \InvalidArgumentException('non-nullable assets_average cannot be null');
        }
        $this->container['assets_average'] = $assets_average;

        return $this;
    }

    /**
     * Gets assets_current
     *
     * @return int|null
     */
    public function getAssetsCurrent()
    {
        return $this->container['assets_current'];
    }

    /**
     * Sets assets_current
     *
     * @param int|null $assets_current assets_current
     *
     * @return self
     */
    public function setAssetsCurrent($assets_current)
    {
        if (is_null($assets_current)) {
            throw new \InvalidArgumentException('non-nullable assets_current cannot be null');
        }
        $this->container['assets_current'] = $assets_current;

        return $this;
    }

    /**
     * Gets assets_non_current
     *
     * @return int|null
     */
    public function getAssetsNonCurrent()
    {
        return $this->container['assets_non_current'];
    }

    /**
     * Sets assets_non_current
     *
     * @param int|null $assets_non_current assets_non_current
     *
     * @return self
     */
    public function setAssetsNonCurrent($assets_non_current)
    {
        if (is_null($assets_non_current)) {
            throw new \InvalidArgumentException('non-nullable assets_non_current cannot be null');
        }
        $this->container['assets_non_current'] = $assets_non_current;

        return $this;
    }

    /**
     * Gets average_equity
     *
     * @return int|null
     */
    public function getAverageEquity()
    {
        return $this->container['average_equity'];
    }

    /**
     * Sets average_equity
     *
     * @param int|null $average_equity average_equity
     *
     * @return self
     */
    public function setAverageEquity($average_equity)
    {
        if (is_null($average_equity)) {
            throw new \InvalidArgumentException('non-nullable average_equity cannot be null');
        }
        $this->container['average_equity'] = $average_equity;

        return $this;
    }

    /**
     * Gets book_value_per_share
     *
     * @return float|null
     */
    public function getBookValuePerShare()
    {
        return $this->container['book_value_per_share'];
    }

    /**
     * Sets book_value_per_share
     *
     * @param float|null $book_value_per_share book_value_per_share
     *
     * @return self
     */
    public function setBookValuePerShare($book_value_per_share)
    {
        if (is_null($book_value_per_share)) {
            throw new \InvalidArgumentException('non-nullable book_value_per_share cannot be null');
        }
        $this->container['book_value_per_share'] = $book_value_per_share;

        return $this;
    }

    /**
     * Gets calendar_date
     *
     * @return \DateTime|null
     */
    public function getCalendarDate()
    {
        return $this->container['calendar_date'];
    }

    /**
     * Sets calendar_date
     *
     * @param \DateTime|null $calendar_date calendar_date
     *
     * @return self
     */
    public function setCalendarDate($calendar_date)
    {
        if (is_null($calendar_date)) {
            throw new \InvalidArgumentException('non-nullable calendar_date cannot be null');
        }
        $this->container['calendar_date'] = $calendar_date;

        return $this;
    }

    /**
     * Gets capital_expenditure
     *
     * @return int|null
     */
    public function getCapitalExpenditure()
    {
        return $this->container['capital_expenditure'];
    }

    /**
     * Sets capital_expenditure
     *
     * @param int|null $capital_expenditure capital_expenditure
     *
     * @return self
     */
    public function setCapitalExpenditure($capital_expenditure)
    {
        if (is_null($capital_expenditure)) {
            throw new \InvalidArgumentException('non-nullable capital_expenditure cannot be null');
        }
        $this->container['capital_expenditure'] = $capital_expenditure;

        return $this;
    }

    /**
     * Gets cash_and_equivalents
     *
     * @return int|null
     */
    public function getCashAndEquivalents()
    {
        return $this->container['cash_and_equivalents'];
    }

    /**
     * Sets cash_and_equivalents
     *
     * @param int|null $cash_and_equivalents cash_and_equivalents
     *
     * @return self
     */
    public function setCashAndEquivalents($cash_and_equivalents)
    {
        if (is_null($cash_and_equivalents)) {
            throw new \InvalidArgumentException('non-nullable cash_and_equivalents cannot be null');
        }
        $this->container['cash_and_equivalents'] = $cash_and_equivalents;

        return $this;
    }

    /**
     * Gets cash_and_equivalents_usd
     *
     * @return int|null
     */
    public function getCashAndEquivalentsUsd()
    {
        return $this->container['cash_and_equivalents_usd'];
    }

    /**
     * Sets cash_and_equivalents_usd
     *
     * @param int|null $cash_and_equivalents_usd cash_and_equivalents_usd
     *
     * @return self
     */
    public function setCashAndEquivalentsUsd($cash_and_equivalents_usd)
    {
        if (is_null($cash_and_equivalents_usd)) {
            throw new \InvalidArgumentException('non-nullable cash_and_equivalents_usd cannot be null');
        }
        $this->container['cash_and_equivalents_usd'] = $cash_and_equivalents_usd;

        return $this;
    }

    /**
     * Gets consolidated_income
     *
     * @return int|null
     */
    public function getConsolidatedIncome()
    {
        return $this->container['consolidated_income'];
    }

    /**
     * Sets consolidated_income
     *
     * @param int|null $consolidated_income consolidated_income
     *
     * @return self
     */
    public function setConsolidatedIncome($consolidated_income)
    {
        if (is_null($consolidated_income)) {
            throw new \InvalidArgumentException('non-nullable consolidated_income cannot be null');
        }
        $this->container['consolidated_income'] = $consolidated_income;

        return $this;
    }

    /**
     * Gets cost_of_revenue
     *
     * @return int|null
     */
    public function getCostOfRevenue()
    {
        return $this->container['cost_of_revenue'];
    }

    /**
     * Sets cost_of_revenue
     *
     * @param int|null $cost_of_revenue cost_of_revenue
     *
     * @return self
     */
    public function setCostOfRevenue($cost_of_revenue)
    {
        if (is_null($cost_of_revenue)) {
            throw new \InvalidArgumentException('non-nullable cost_of_revenue cannot be null');
        }
        $this->container['cost_of_revenue'] = $cost_of_revenue;

        return $this;
    }

    /**
     * Gets current_liabilities
     *
     * @return int|null
     */
    public function getCurrentLiabilities()
    {
        return $this->container['current_liabilities'];
    }

    /**
     * Sets current_liabilities
     *
     * @param int|null $current_liabilities current_liabilities
     *
     * @return self
     */
    public function setCurrentLiabilities($current_liabilities)
    {
        if (is_null($current_liabilities)) {
            throw new \InvalidArgumentException('non-nullable current_liabilities cannot be null');
        }
        $this->container['current_liabilities'] = $current_liabilities;

        return $this;
    }

    /**
     * Gets current_ratio
     *
     * @return float|null
     */
    public function getCurrentRatio()
    {
        return $this->container['current_ratio'];
    }

    /**
     * Sets current_ratio
     *
     * @param float|null $current_ratio current_ratio
     *
     * @return self
     */
    public function setCurrentRatio($current_ratio)
    {
        if (is_null($current_ratio)) {
            throw new \InvalidArgumentException('non-nullable current_ratio cannot be null');
        }
        $this->container['current_ratio'] = $current_ratio;

        return $this;
    }

    /**
     * Gets debt
     *
     * @return int|null
     */
    public function getDebt()
    {
        return $this->container['debt'];
    }

    /**
     * Sets debt
     *
     * @param int|null $debt debt
     *
     * @return self
     */
    public function setDebt($debt)
    {
        if (is_null($debt)) {
            throw new \InvalidArgumentException('non-nullable debt cannot be null');
        }
        $this->container['debt'] = $debt;

        return $this;
    }

    /**
     * Gets debt_current
     *
     * @return int|null
     */
    public function getDebtCurrent()
    {
        return $this->container['debt_current'];
    }

    /**
     * Sets debt_current
     *
     * @param int|null $debt_current debt_current
     *
     * @return self
     */
    public function setDebtCurrent($debt_current)
    {
        if (is_null($debt_current)) {
            throw new \InvalidArgumentException('non-nullable debt_current cannot be null');
        }
        $this->container['debt_current'] = $debt_current;

        return $this;
    }

    /**
     * Gets debt_non_current
     *
     * @return int|null
     */
    public function getDebtNonCurrent()
    {
        return $this->container['debt_non_current'];
    }

    /**
     * Sets debt_non_current
     *
     * @param int|null $debt_non_current debt_non_current
     *
     * @return self
     */
    public function setDebtNonCurrent($debt_non_current)
    {
        if (is_null($debt_non_current)) {
            throw new \InvalidArgumentException('non-nullable debt_non_current cannot be null');
        }
        $this->container['debt_non_current'] = $debt_non_current;

        return $this;
    }

    /**
     * Gets debt_to_equity_ratio
     *
     * @return float|null
     */
    public function getDebtToEquityRatio()
    {
        return $this->container['debt_to_equity_ratio'];
    }

    /**
     * Sets debt_to_equity_ratio
     *
     * @param float|null $debt_to_equity_ratio debt_to_equity_ratio
     *
     * @return self
     */
    public function setDebtToEquityRatio($debt_to_equity_ratio)
    {
        if (is_null($debt_to_equity_ratio)) {
            throw new \InvalidArgumentException('non-nullable debt_to_equity_ratio cannot be null');
        }
        $this->container['debt_to_equity_ratio'] = $debt_to_equity_ratio;

        return $this;
    }

    /**
     * Gets debt_usd
     *
     * @return int|null
     */
    public function getDebtUsd()
    {
        return $this->container['debt_usd'];
    }

    /**
     * Sets debt_usd
     *
     * @param int|null $debt_usd debt_usd
     *
     * @return self
     */
    public function setDebtUsd($debt_usd)
    {
        if (is_null($debt_usd)) {
            throw new \InvalidArgumentException('non-nullable debt_usd cannot be null');
        }
        $this->container['debt_usd'] = $debt_usd;

        return $this;
    }

    /**
     * Gets deferred_revenue
     *
     * @return int|null
     */
    public function getDeferredRevenue()
    {
        return $this->container['deferred_revenue'];
    }

    /**
     * Sets deferred_revenue
     *
     * @param int|null $deferred_revenue deferred_revenue
     *
     * @return self
     */
    public function setDeferredRevenue($deferred_revenue)
    {
        if (is_null($deferred_revenue)) {
            throw new \InvalidArgumentException('non-nullable deferred_revenue cannot be null');
        }
        $this->container['deferred_revenue'] = $deferred_revenue;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return int|null
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param int|null $deposits deposits
     *
     * @return self
     */
    public function setDeposits($deposits)
    {
        if (is_null($deposits)) {
            throw new \InvalidArgumentException('non-nullable deposits cannot be null');
        }
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets depreciation_amortization_and_accretion
     *
     * @return int|null
     */
    public function getDepreciationAmortizationAndAccretion()
    {
        return $this->container['depreciation_amortization_and_accretion'];
    }

    /**
     * Sets depreciation_amortization_and_accretion
     *
     * @param int|null $depreciation_amortization_and_accretion depreciation_amortization_and_accretion
     *
     * @return self
     */
    public function setDepreciationAmortizationAndAccretion($depreciation_amortization_and_accretion)
    {
        if (is_null($depreciation_amortization_and_accretion)) {
            throw new \InvalidArgumentException('non-nullable depreciation_amortization_and_accretion cannot be null');
        }
        $this->container['depreciation_amortization_and_accretion'] = $depreciation_amortization_and_accretion;

        return $this;
    }

    /**
     * Gets dividend_yield
     *
     * @return int|null
     */
    public function getDividendYield()
    {
        return $this->container['dividend_yield'];
    }

    /**
     * Sets dividend_yield
     *
     * @param int|null $dividend_yield dividend_yield
     *
     * @return self
     */
    public function setDividendYield($dividend_yield)
    {
        if (is_null($dividend_yield)) {
            throw new \InvalidArgumentException('non-nullable dividend_yield cannot be null');
        }
        $this->container['dividend_yield'] = $dividend_yield;

        return $this;
    }

    /**
     * Gets dividends_per_basic_common_share
     *
     * @return int|null
     */
    public function getDividendsPerBasicCommonShare()
    {
        return $this->container['dividends_per_basic_common_share'];
    }

    /**
     * Sets dividends_per_basic_common_share
     *
     * @param int|null $dividends_per_basic_common_share dividends_per_basic_common_share
     *
     * @return self
     */
    public function setDividendsPerBasicCommonShare($dividends_per_basic_common_share)
    {
        if (is_null($dividends_per_basic_common_share)) {
            throw new \InvalidArgumentException('non-nullable dividends_per_basic_common_share cannot be null');
        }
        $this->container['dividends_per_basic_common_share'] = $dividends_per_basic_common_share;

        return $this;
    }

    /**
     * Gets earning_before_interest_taxes
     *
     * @return int|null
     */
    public function getEarningBeforeInterestTaxes()
    {
        return $this->container['earning_before_interest_taxes'];
    }

    /**
     * Sets earning_before_interest_taxes
     *
     * @param int|null $earning_before_interest_taxes earning_before_interest_taxes
     *
     * @return self
     */
    public function setEarningBeforeInterestTaxes($earning_before_interest_taxes)
    {
        if (is_null($earning_before_interest_taxes)) {
            throw new \InvalidArgumentException('non-nullable earning_before_interest_taxes cannot be null');
        }
        $this->container['earning_before_interest_taxes'] = $earning_before_interest_taxes;

        return $this;
    }

    /**
     * Gets earning_before_interest_taxes_usd
     *
     * @return int|null
     */
    public function getEarningBeforeInterestTaxesUsd()
    {
        return $this->container['earning_before_interest_taxes_usd'];
    }

    /**
     * Sets earning_before_interest_taxes_usd
     *
     * @param int|null $earning_before_interest_taxes_usd earning_before_interest_taxes_usd
     *
     * @return self
     */
    public function setEarningBeforeInterestTaxesUsd($earning_before_interest_taxes_usd)
    {
        if (is_null($earning_before_interest_taxes_usd)) {
            throw new \InvalidArgumentException('non-nullable earning_before_interest_taxes_usd cannot be null');
        }
        $this->container['earning_before_interest_taxes_usd'] = $earning_before_interest_taxes_usd;

        return $this;
    }

    /**
     * Gets earnings_before_interest_taxes_depreciation_amortization
     *
     * @return int|null
     */
    public function getEarningsBeforeInterestTaxesDepreciationAmortization()
    {
        return $this->container['earnings_before_interest_taxes_depreciation_amortization'];
    }

    /**
     * Sets earnings_before_interest_taxes_depreciation_amortization
     *
     * @param int|null $earnings_before_interest_taxes_depreciation_amortization earnings_before_interest_taxes_depreciation_amortization
     *
     * @return self
     */
    public function setEarningsBeforeInterestTaxesDepreciationAmortization($earnings_before_interest_taxes_depreciation_amortization)
    {
        if (is_null($earnings_before_interest_taxes_depreciation_amortization)) {
            throw new \InvalidArgumentException('non-nullable earnings_before_interest_taxes_depreciation_amortization cannot be null');
        }
        $this->container['earnings_before_interest_taxes_depreciation_amortization'] = $earnings_before_interest_taxes_depreciation_amortization;

        return $this;
    }

    /**
     * Gets earnings_before_interest_taxes_depreciation_amortization_usd
     *
     * @return int|null
     */
    public function getEarningsBeforeInterestTaxesDepreciationAmortizationUsd()
    {
        return $this->container['earnings_before_interest_taxes_depreciation_amortization_usd'];
    }

    /**
     * Sets earnings_before_interest_taxes_depreciation_amortization_usd
     *
     * @param int|null $earnings_before_interest_taxes_depreciation_amortization_usd earnings_before_interest_taxes_depreciation_amortization_usd
     *
     * @return self
     */
    public function setEarningsBeforeInterestTaxesDepreciationAmortizationUsd($earnings_before_interest_taxes_depreciation_amortization_usd)
    {
        if (is_null($earnings_before_interest_taxes_depreciation_amortization_usd)) {
            throw new \InvalidArgumentException('non-nullable earnings_before_interest_taxes_depreciation_amortization_usd cannot be null');
        }
        $this->container['earnings_before_interest_taxes_depreciation_amortization_usd'] = $earnings_before_interest_taxes_depreciation_amortization_usd;

        return $this;
    }

    /**
     * Gets earnings_before_tax
     *
     * @return int|null
     */
    public function getEarningsBeforeTax()
    {
        return $this->container['earnings_before_tax'];
    }

    /**
     * Sets earnings_before_tax
     *
     * @param int|null $earnings_before_tax earnings_before_tax
     *
     * @return self
     */
    public function setEarningsBeforeTax($earnings_before_tax)
    {
        if (is_null($earnings_before_tax)) {
            throw new \InvalidArgumentException('non-nullable earnings_before_tax cannot be null');
        }
        $this->container['earnings_before_tax'] = $earnings_before_tax;

        return $this;
    }

    /**
     * Gets earnings_per_basic_share
     *
     * @return float|null
     */
    public function getEarningsPerBasicShare()
    {
        return $this->container['earnings_per_basic_share'];
    }

    /**
     * Sets earnings_per_basic_share
     *
     * @param float|null $earnings_per_basic_share earnings_per_basic_share
     *
     * @return self
     */
    public function setEarningsPerBasicShare($earnings_per_basic_share)
    {
        if (is_null($earnings_per_basic_share)) {
            throw new \InvalidArgumentException('non-nullable earnings_per_basic_share cannot be null');
        }
        $this->container['earnings_per_basic_share'] = $earnings_per_basic_share;

        return $this;
    }

    /**
     * Gets earnings_per_basic_share_usd
     *
     * @return float|null
     */
    public function getEarningsPerBasicShareUsd()
    {
        return $this->container['earnings_per_basic_share_usd'];
    }

    /**
     * Sets earnings_per_basic_share_usd
     *
     * @param float|null $earnings_per_basic_share_usd earnings_per_basic_share_usd
     *
     * @return self
     */
    public function setEarningsPerBasicShareUsd($earnings_per_basic_share_usd)
    {
        if (is_null($earnings_per_basic_share_usd)) {
            throw new \InvalidArgumentException('non-nullable earnings_per_basic_share_usd cannot be null');
        }
        $this->container['earnings_per_basic_share_usd'] = $earnings_per_basic_share_usd;

        return $this;
    }

    /**
     * Gets earnings_per_diluted_share
     *
     * @return float|null
     */
    public function getEarningsPerDilutedShare()
    {
        return $this->container['earnings_per_diluted_share'];
    }

    /**
     * Sets earnings_per_diluted_share
     *
     * @param float|null $earnings_per_diluted_share earnings_per_diluted_share
     *
     * @return self
     */
    public function setEarningsPerDilutedShare($earnings_per_diluted_share)
    {
        if (is_null($earnings_per_diluted_share)) {
            throw new \InvalidArgumentException('non-nullable earnings_per_diluted_share cannot be null');
        }
        $this->container['earnings_per_diluted_share'] = $earnings_per_diluted_share;

        return $this;
    }

    /**
     * Gets effect_of_exchange_rate_changes_on_cash
     *
     * @return int|null
     */
    public function getEffectOfExchangeRateChangesOnCash()
    {
        return $this->container['effect_of_exchange_rate_changes_on_cash'];
    }

    /**
     * Sets effect_of_exchange_rate_changes_on_cash
     *
     * @param int|null $effect_of_exchange_rate_changes_on_cash effect_of_exchange_rate_changes_on_cash
     *
     * @return self
     */
    public function setEffectOfExchangeRateChangesOnCash($effect_of_exchange_rate_changes_on_cash)
    {
        if (is_null($effect_of_exchange_rate_changes_on_cash)) {
            throw new \InvalidArgumentException('non-nullable effect_of_exchange_rate_changes_on_cash cannot be null');
        }
        $this->container['effect_of_exchange_rate_changes_on_cash'] = $effect_of_exchange_rate_changes_on_cash;

        return $this;
    }

    /**
     * Gets enterprise_value
     *
     * @return int|null
     */
    public function getEnterpriseValue()
    {
        return $this->container['enterprise_value'];
    }

    /**
     * Sets enterprise_value
     *
     * @param int|null $enterprise_value enterprise_value
     *
     * @return self
     */
    public function setEnterpriseValue($enterprise_value)
    {
        if (is_null($enterprise_value)) {
            throw new \InvalidArgumentException('non-nullable enterprise_value cannot be null');
        }
        $this->container['enterprise_value'] = $enterprise_value;

        return $this;
    }

    /**
     * Gets enterprise_value_over_ebit
     *
     * @return int|null
     */
    public function getEnterpriseValueOverEbit()
    {
        return $this->container['enterprise_value_over_ebit'];
    }

    /**
     * Sets enterprise_value_over_ebit
     *
     * @param int|null $enterprise_value_over_ebit enterprise_value_over_ebit
     *
     * @return self
     */
    public function setEnterpriseValueOverEbit($enterprise_value_over_ebit)
    {
        if (is_null($enterprise_value_over_ebit)) {
            throw new \InvalidArgumentException('non-nullable enterprise_value_over_ebit cannot be null');
        }
        $this->container['enterprise_value_over_ebit'] = $enterprise_value_over_ebit;

        return $this;
    }

    /**
     * Gets enterprise_value_over_ebitda
     *
     * @return float|null
     */
    public function getEnterpriseValueOverEbitda()
    {
        return $this->container['enterprise_value_over_ebitda'];
    }

    /**
     * Sets enterprise_value_over_ebitda
     *
     * @param float|null $enterprise_value_over_ebitda enterprise_value_over_ebitda
     *
     * @return self
     */
    public function setEnterpriseValueOverEbitda($enterprise_value_over_ebitda)
    {
        if (is_null($enterprise_value_over_ebitda)) {
            throw new \InvalidArgumentException('non-nullable enterprise_value_over_ebitda cannot be null');
        }
        $this->container['enterprise_value_over_ebitda'] = $enterprise_value_over_ebitda;

        return $this;
    }

    /**
     * Gets foreign_currency_usd_exchange_rate
     *
     * @return int|null
     */
    public function getForeignCurrencyUsdExchangeRate()
    {
        return $this->container['foreign_currency_usd_exchange_rate'];
    }

    /**
     * Sets foreign_currency_usd_exchange_rate
     *
     * @param int|null $foreign_currency_usd_exchange_rate foreign_currency_usd_exchange_rate
     *
     * @return self
     */
    public function setForeignCurrencyUsdExchangeRate($foreign_currency_usd_exchange_rate)
    {
        if (is_null($foreign_currency_usd_exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable foreign_currency_usd_exchange_rate cannot be null');
        }
        $this->container['foreign_currency_usd_exchange_rate'] = $foreign_currency_usd_exchange_rate;

        return $this;
    }

    /**
     * Gets free_cash_flow
     *
     * @return int|null
     */
    public function getFreeCashFlow()
    {
        return $this->container['free_cash_flow'];
    }

    /**
     * Sets free_cash_flow
     *
     * @param int|null $free_cash_flow free_cash_flow
     *
     * @return self
     */
    public function setFreeCashFlow($free_cash_flow)
    {
        if (is_null($free_cash_flow)) {
            throw new \InvalidArgumentException('non-nullable free_cash_flow cannot be null');
        }
        $this->container['free_cash_flow'] = $free_cash_flow;

        return $this;
    }

    /**
     * Gets free_cash_flow_per_share
     *
     * @return float|null
     */
    public function getFreeCashFlowPerShare()
    {
        return $this->container['free_cash_flow_per_share'];
    }

    /**
     * Sets free_cash_flow_per_share
     *
     * @param float|null $free_cash_flow_per_share free_cash_flow_per_share
     *
     * @return self
     */
    public function setFreeCashFlowPerShare($free_cash_flow_per_share)
    {
        if (is_null($free_cash_flow_per_share)) {
            throw new \InvalidArgumentException('non-nullable free_cash_flow_per_share cannot be null');
        }
        $this->container['free_cash_flow_per_share'] = $free_cash_flow_per_share;

        return $this;
    }

    /**
     * Gets goodwill_and_intangible_assets
     *
     * @return int|null
     */
    public function getGoodwillAndIntangibleAssets()
    {
        return $this->container['goodwill_and_intangible_assets'];
    }

    /**
     * Sets goodwill_and_intangible_assets
     *
     * @param int|null $goodwill_and_intangible_assets goodwill_and_intangible_assets
     *
     * @return self
     */
    public function setGoodwillAndIntangibleAssets($goodwill_and_intangible_assets)
    {
        if (is_null($goodwill_and_intangible_assets)) {
            throw new \InvalidArgumentException('non-nullable goodwill_and_intangible_assets cannot be null');
        }
        $this->container['goodwill_and_intangible_assets'] = $goodwill_and_intangible_assets;

        return $this;
    }

    /**
     * Gets gross_margin
     *
     * @return float|null
     */
    public function getGrossMargin()
    {
        return $this->container['gross_margin'];
    }

    /**
     * Sets gross_margin
     *
     * @param float|null $gross_margin gross_margin
     *
     * @return self
     */
    public function setGrossMargin($gross_margin)
    {
        if (is_null($gross_margin)) {
            throw new \InvalidArgumentException('non-nullable gross_margin cannot be null');
        }
        $this->container['gross_margin'] = $gross_margin;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return int|null
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param int|null $gross_profit gross_profit
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            throw new \InvalidArgumentException('non-nullable gross_profit cannot be null');
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets income_tax_expense
     *
     * @return int|null
     */
    public function getIncomeTaxExpense()
    {
        return $this->container['income_tax_expense'];
    }

    /**
     * Sets income_tax_expense
     *
     * @param int|null $income_tax_expense income_tax_expense
     *
     * @return self
     */
    public function setIncomeTaxExpense($income_tax_expense)
    {
        if (is_null($income_tax_expense)) {
            throw new \InvalidArgumentException('non-nullable income_tax_expense cannot be null');
        }
        $this->container['income_tax_expense'] = $income_tax_expense;

        return $this;
    }

    /**
     * Gets interest_expense
     *
     * @return int|null
     */
    public function getInterestExpense()
    {
        return $this->container['interest_expense'];
    }

    /**
     * Sets interest_expense
     *
     * @param int|null $interest_expense interest_expense
     *
     * @return self
     */
    public function setInterestExpense($interest_expense)
    {
        if (is_null($interest_expense)) {
            throw new \InvalidArgumentException('non-nullable interest_expense cannot be null');
        }
        $this->container['interest_expense'] = $interest_expense;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return int|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param int|null $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets invested_capital
     *
     * @return int|null
     */
    public function getInvestedCapital()
    {
        return $this->container['invested_capital'];
    }

    /**
     * Sets invested_capital
     *
     * @param int|null $invested_capital invested_capital
     *
     * @return self
     */
    public function setInvestedCapital($invested_capital)
    {
        if (is_null($invested_capital)) {
            throw new \InvalidArgumentException('non-nullable invested_capital cannot be null');
        }
        $this->container['invested_capital'] = $invested_capital;

        return $this;
    }

    /**
     * Gets invested_capital_average
     *
     * @return int|null
     */
    public function getInvestedCapitalAverage()
    {
        return $this->container['invested_capital_average'];
    }

    /**
     * Sets invested_capital_average
     *
     * @param int|null $invested_capital_average invested_capital_average
     *
     * @return self
     */
    public function setInvestedCapitalAverage($invested_capital_average)
    {
        if (is_null($invested_capital_average)) {
            throw new \InvalidArgumentException('non-nullable invested_capital_average cannot be null');
        }
        $this->container['invested_capital_average'] = $invested_capital_average;

        return $this;
    }

    /**
     * Gets investments
     *
     * @return int|null
     */
    public function getInvestments()
    {
        return $this->container['investments'];
    }

    /**
     * Sets investments
     *
     * @param int|null $investments investments
     *
     * @return self
     */
    public function setInvestments($investments)
    {
        if (is_null($investments)) {
            throw new \InvalidArgumentException('non-nullable investments cannot be null');
        }
        $this->container['investments'] = $investments;

        return $this;
    }

    /**
     * Gets investments_current
     *
     * @return int|null
     */
    public function getInvestmentsCurrent()
    {
        return $this->container['investments_current'];
    }

    /**
     * Sets investments_current
     *
     * @param int|null $investments_current investments_current
     *
     * @return self
     */
    public function setInvestmentsCurrent($investments_current)
    {
        if (is_null($investments_current)) {
            throw new \InvalidArgumentException('non-nullable investments_current cannot be null');
        }
        $this->container['investments_current'] = $investments_current;

        return $this;
    }

    /**
     * Gets investments_non_current
     *
     * @return int|null
     */
    public function getInvestmentsNonCurrent()
    {
        return $this->container['investments_non_current'];
    }

    /**
     * Sets investments_non_current
     *
     * @param int|null $investments_non_current investments_non_current
     *
     * @return self
     */
    public function setInvestmentsNonCurrent($investments_non_current)
    {
        if (is_null($investments_non_current)) {
            throw new \InvalidArgumentException('non-nullable investments_non_current cannot be null');
        }
        $this->container['investments_non_current'] = $investments_non_current;

        return $this;
    }

    /**
     * Gets issuance_debt_securities
     *
     * @return int|null
     */
    public function getIssuanceDebtSecurities()
    {
        return $this->container['issuance_debt_securities'];
    }

    /**
     * Sets issuance_debt_securities
     *
     * @param int|null $issuance_debt_securities issuance_debt_securities
     *
     * @return self
     */
    public function setIssuanceDebtSecurities($issuance_debt_securities)
    {
        if (is_null($issuance_debt_securities)) {
            throw new \InvalidArgumentException('non-nullable issuance_debt_securities cannot be null');
        }
        $this->container['issuance_debt_securities'] = $issuance_debt_securities;

        return $this;
    }

    /**
     * Gets issuance_equity_shares
     *
     * @return int|null
     */
    public function getIssuanceEquityShares()
    {
        return $this->container['issuance_equity_shares'];
    }

    /**
     * Sets issuance_equity_shares
     *
     * @param int|null $issuance_equity_shares issuance_equity_shares
     *
     * @return self
     */
    public function setIssuanceEquityShares($issuance_equity_shares)
    {
        if (is_null($issuance_equity_shares)) {
            throw new \InvalidArgumentException('non-nullable issuance_equity_shares cannot be null');
        }
        $this->container['issuance_equity_shares'] = $issuance_equity_shares;

        return $this;
    }

    /**
     * Gets liabilities_non_current
     *
     * @return int|null
     */
    public function getLiabilitiesNonCurrent()
    {
        return $this->container['liabilities_non_current'];
    }

    /**
     * Sets liabilities_non_current
     *
     * @param int|null $liabilities_non_current liabilities_non_current
     *
     * @return self
     */
    public function setLiabilitiesNonCurrent($liabilities_non_current)
    {
        if (is_null($liabilities_non_current)) {
            throw new \InvalidArgumentException('non-nullable liabilities_non_current cannot be null');
        }
        $this->container['liabilities_non_current'] = $liabilities_non_current;

        return $this;
    }

    /**
     * Gets market_capitalization
     *
     * @return int|null
     */
    public function getMarketCapitalization()
    {
        return $this->container['market_capitalization'];
    }

    /**
     * Sets market_capitalization
     *
     * @param int|null $market_capitalization market_capitalization
     *
     * @return self
     */
    public function setMarketCapitalization($market_capitalization)
    {
        if (is_null($market_capitalization)) {
            throw new \InvalidArgumentException('non-nullable market_capitalization cannot be null');
        }
        $this->container['market_capitalization'] = $market_capitalization;

        return $this;
    }

    /**
     * Gets net_cash_flow
     *
     * @return int|null
     */
    public function getNetCashFlow()
    {
        return $this->container['net_cash_flow'];
    }

    /**
     * Sets net_cash_flow
     *
     * @param int|null $net_cash_flow net_cash_flow
     *
     * @return self
     */
    public function setNetCashFlow($net_cash_flow)
    {
        if (is_null($net_cash_flow)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow cannot be null');
        }
        $this->container['net_cash_flow'] = $net_cash_flow;

        return $this;
    }

    /**
     * Gets net_cash_flow_business_acquisitions_disposals
     *
     * @return int|null
     */
    public function getNetCashFlowBusinessAcquisitionsDisposals()
    {
        return $this->container['net_cash_flow_business_acquisitions_disposals'];
    }

    /**
     * Sets net_cash_flow_business_acquisitions_disposals
     *
     * @param int|null $net_cash_flow_business_acquisitions_disposals net_cash_flow_business_acquisitions_disposals
     *
     * @return self
     */
    public function setNetCashFlowBusinessAcquisitionsDisposals($net_cash_flow_business_acquisitions_disposals)
    {
        if (is_null($net_cash_flow_business_acquisitions_disposals)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_business_acquisitions_disposals cannot be null');
        }
        $this->container['net_cash_flow_business_acquisitions_disposals'] = $net_cash_flow_business_acquisitions_disposals;

        return $this;
    }

    /**
     * Gets net_cash_flow_from_financing
     *
     * @return int|null
     */
    public function getNetCashFlowFromFinancing()
    {
        return $this->container['net_cash_flow_from_financing'];
    }

    /**
     * Sets net_cash_flow_from_financing
     *
     * @param int|null $net_cash_flow_from_financing net_cash_flow_from_financing
     *
     * @return self
     */
    public function setNetCashFlowFromFinancing($net_cash_flow_from_financing)
    {
        if (is_null($net_cash_flow_from_financing)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_from_financing cannot be null');
        }
        $this->container['net_cash_flow_from_financing'] = $net_cash_flow_from_financing;

        return $this;
    }

    /**
     * Gets net_cash_flow_from_investing
     *
     * @return int|null
     */
    public function getNetCashFlowFromInvesting()
    {
        return $this->container['net_cash_flow_from_investing'];
    }

    /**
     * Sets net_cash_flow_from_investing
     *
     * @param int|null $net_cash_flow_from_investing net_cash_flow_from_investing
     *
     * @return self
     */
    public function setNetCashFlowFromInvesting($net_cash_flow_from_investing)
    {
        if (is_null($net_cash_flow_from_investing)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_from_investing cannot be null');
        }
        $this->container['net_cash_flow_from_investing'] = $net_cash_flow_from_investing;

        return $this;
    }

    /**
     * Gets net_cash_flow_from_operations
     *
     * @return int|null
     */
    public function getNetCashFlowFromOperations()
    {
        return $this->container['net_cash_flow_from_operations'];
    }

    /**
     * Sets net_cash_flow_from_operations
     *
     * @param int|null $net_cash_flow_from_operations net_cash_flow_from_operations
     *
     * @return self
     */
    public function setNetCashFlowFromOperations($net_cash_flow_from_operations)
    {
        if (is_null($net_cash_flow_from_operations)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_from_operations cannot be null');
        }
        $this->container['net_cash_flow_from_operations'] = $net_cash_flow_from_operations;

        return $this;
    }

    /**
     * Gets net_cash_flow_investment_acquisitions_disposals
     *
     * @return int|null
     */
    public function getNetCashFlowInvestmentAcquisitionsDisposals()
    {
        return $this->container['net_cash_flow_investment_acquisitions_disposals'];
    }

    /**
     * Sets net_cash_flow_investment_acquisitions_disposals
     *
     * @param int|null $net_cash_flow_investment_acquisitions_disposals net_cash_flow_investment_acquisitions_disposals
     *
     * @return self
     */
    public function setNetCashFlowInvestmentAcquisitionsDisposals($net_cash_flow_investment_acquisitions_disposals)
    {
        if (is_null($net_cash_flow_investment_acquisitions_disposals)) {
            throw new \InvalidArgumentException('non-nullable net_cash_flow_investment_acquisitions_disposals cannot be null');
        }
        $this->container['net_cash_flow_investment_acquisitions_disposals'] = $net_cash_flow_investment_acquisitions_disposals;

        return $this;
    }

    /**
     * Gets net_income
     *
     * @return int|null
     */
    public function getNetIncome()
    {
        return $this->container['net_income'];
    }

    /**
     * Sets net_income
     *
     * @param int|null $net_income net_income
     *
     * @return self
     */
    public function setNetIncome($net_income)
    {
        if (is_null($net_income)) {
            throw new \InvalidArgumentException('non-nullable net_income cannot be null');
        }
        $this->container['net_income'] = $net_income;

        return $this;
    }

    /**
     * Gets net_income_common_stock
     *
     * @return int|null
     */
    public function getNetIncomeCommonStock()
    {
        return $this->container['net_income_common_stock'];
    }

    /**
     * Sets net_income_common_stock
     *
     * @param int|null $net_income_common_stock net_income_common_stock
     *
     * @return self
     */
    public function setNetIncomeCommonStock($net_income_common_stock)
    {
        if (is_null($net_income_common_stock)) {
            throw new \InvalidArgumentException('non-nullable net_income_common_stock cannot be null');
        }
        $this->container['net_income_common_stock'] = $net_income_common_stock;

        return $this;
    }

    /**
     * Gets net_income_common_stock_usd
     *
     * @return int|null
     */
    public function getNetIncomeCommonStockUsd()
    {
        return $this->container['net_income_common_stock_usd'];
    }

    /**
     * Sets net_income_common_stock_usd
     *
     * @param int|null $net_income_common_stock_usd net_income_common_stock_usd
     *
     * @return self
     */
    public function setNetIncomeCommonStockUsd($net_income_common_stock_usd)
    {
        if (is_null($net_income_common_stock_usd)) {
            throw new \InvalidArgumentException('non-nullable net_income_common_stock_usd cannot be null');
        }
        $this->container['net_income_common_stock_usd'] = $net_income_common_stock_usd;

        return $this;
    }

    /**
     * Gets net_income_to_non_controlling_interests
     *
     * @return int|null
     */
    public function getNetIncomeToNonControllingInterests()
    {
        return $this->container['net_income_to_non_controlling_interests'];
    }

    /**
     * Sets net_income_to_non_controlling_interests
     *
     * @param int|null $net_income_to_non_controlling_interests net_income_to_non_controlling_interests
     *
     * @return self
     */
    public function setNetIncomeToNonControllingInterests($net_income_to_non_controlling_interests)
    {
        if (is_null($net_income_to_non_controlling_interests)) {
            throw new \InvalidArgumentException('non-nullable net_income_to_non_controlling_interests cannot be null');
        }
        $this->container['net_income_to_non_controlling_interests'] = $net_income_to_non_controlling_interests;

        return $this;
    }

    /**
     * Gets net_loss_income_from_discontinued_operations
     *
     * @return int|null
     */
    public function getNetLossIncomeFromDiscontinuedOperations()
    {
        return $this->container['net_loss_income_from_discontinued_operations'];
    }

    /**
     * Sets net_loss_income_from_discontinued_operations
     *
     * @param int|null $net_loss_income_from_discontinued_operations net_loss_income_from_discontinued_operations
     *
     * @return self
     */
    public function setNetLossIncomeFromDiscontinuedOperations($net_loss_income_from_discontinued_operations)
    {
        if (is_null($net_loss_income_from_discontinued_operations)) {
            throw new \InvalidArgumentException('non-nullable net_loss_income_from_discontinued_operations cannot be null');
        }
        $this->container['net_loss_income_from_discontinued_operations'] = $net_loss_income_from_discontinued_operations;

        return $this;
    }

    /**
     * Gets operating_expenses
     *
     * @return int|null
     */
    public function getOperatingExpenses()
    {
        return $this->container['operating_expenses'];
    }

    /**
     * Sets operating_expenses
     *
     * @param int|null $operating_expenses operating_expenses
     *
     * @return self
     */
    public function setOperatingExpenses($operating_expenses)
    {
        if (is_null($operating_expenses)) {
            throw new \InvalidArgumentException('non-nullable operating_expenses cannot be null');
        }
        $this->container['operating_expenses'] = $operating_expenses;

        return $this;
    }

    /**
     * Gets operating_income
     *
     * @return int|null
     */
    public function getOperatingIncome()
    {
        return $this->container['operating_income'];
    }

    /**
     * Sets operating_income
     *
     * @param int|null $operating_income operating_income
     *
     * @return self
     */
    public function setOperatingIncome($operating_income)
    {
        if (is_null($operating_income)) {
            throw new \InvalidArgumentException('non-nullable operating_income cannot be null');
        }
        $this->container['operating_income'] = $operating_income;

        return $this;
    }

    /**
     * Gets payment_dividends_other_cash_distributions
     *
     * @return int|null
     */
    public function getPaymentDividendsOtherCashDistributions()
    {
        return $this->container['payment_dividends_other_cash_distributions'];
    }

    /**
     * Sets payment_dividends_other_cash_distributions
     *
     * @param int|null $payment_dividends_other_cash_distributions payment_dividends_other_cash_distributions
     *
     * @return self
     */
    public function setPaymentDividendsOtherCashDistributions($payment_dividends_other_cash_distributions)
    {
        if (is_null($payment_dividends_other_cash_distributions)) {
            throw new \InvalidArgumentException('non-nullable payment_dividends_other_cash_distributions cannot be null');
        }
        $this->container['payment_dividends_other_cash_distributions'] = $payment_dividends_other_cash_distributions;

        return $this;
    }

    /**
     * Gets payout_ratio
     *
     * @return int|null
     */
    public function getPayoutRatio()
    {
        return $this->container['payout_ratio'];
    }

    /**
     * Sets payout_ratio
     *
     * @param int|null $payout_ratio payout_ratio
     *
     * @return self
     */
    public function setPayoutRatio($payout_ratio)
    {
        if (is_null($payout_ratio)) {
            throw new \InvalidArgumentException('non-nullable payout_ratio cannot be null');
        }
        $this->container['payout_ratio'] = $payout_ratio;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period Reporting period.
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $allowedValues = $this->getPeriodAllowableValues();
        if (!in_array($period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'period', must be one of '%s'",
                    $period,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets preferred_dividends_income_statement_impact
     *
     * @return int|null
     */
    public function getPreferredDividendsIncomeStatementImpact()
    {
        return $this->container['preferred_dividends_income_statement_impact'];
    }

    /**
     * Sets preferred_dividends_income_statement_impact
     *
     * @param int|null $preferred_dividends_income_statement_impact preferred_dividends_income_statement_impact
     *
     * @return self
     */
    public function setPreferredDividendsIncomeStatementImpact($preferred_dividends_income_statement_impact)
    {
        if (is_null($preferred_dividends_income_statement_impact)) {
            throw new \InvalidArgumentException('non-nullable preferred_dividends_income_statement_impact cannot be null');
        }
        $this->container['preferred_dividends_income_statement_impact'] = $preferred_dividends_income_statement_impact;

        return $this;
    }

    /**
     * Gets price_earnings
     *
     * @return float|null
     */
    public function getPriceEarnings()
    {
        return $this->container['price_earnings'];
    }

    /**
     * Sets price_earnings
     *
     * @param float|null $price_earnings price_earnings
     *
     * @return self
     */
    public function setPriceEarnings($price_earnings)
    {
        if (is_null($price_earnings)) {
            throw new \InvalidArgumentException('non-nullable price_earnings cannot be null');
        }
        $this->container['price_earnings'] = $price_earnings;

        return $this;
    }

    /**
     * Gets price_sales
     *
     * @return float|null
     */
    public function getPriceSales()
    {
        return $this->container['price_sales'];
    }

    /**
     * Sets price_sales
     *
     * @param float|null $price_sales price_sales
     *
     * @return self
     */
    public function setPriceSales($price_sales)
    {
        if (is_null($price_sales)) {
            throw new \InvalidArgumentException('non-nullable price_sales cannot be null');
        }
        $this->container['price_sales'] = $price_sales;

        return $this;
    }

    /**
     * Gets price_to_book_value
     *
     * @return float|null
     */
    public function getPriceToBookValue()
    {
        return $this->container['price_to_book_value'];
    }

    /**
     * Sets price_to_book_value
     *
     * @param float|null $price_to_book_value price_to_book_value
     *
     * @return self
     */
    public function setPriceToBookValue($price_to_book_value)
    {
        if (is_null($price_to_book_value)) {
            throw new \InvalidArgumentException('non-nullable price_to_book_value cannot be null');
        }
        $this->container['price_to_book_value'] = $price_to_book_value;

        return $this;
    }

    /**
     * Gets price_to_earnings_ratio
     *
     * @return float|null
     */
    public function getPriceToEarningsRatio()
    {
        return $this->container['price_to_earnings_ratio'];
    }

    /**
     * Sets price_to_earnings_ratio
     *
     * @param float|null $price_to_earnings_ratio price_to_earnings_ratio
     *
     * @return self
     */
    public function setPriceToEarningsRatio($price_to_earnings_ratio)
    {
        if (is_null($price_to_earnings_ratio)) {
            throw new \InvalidArgumentException('non-nullable price_to_earnings_ratio cannot be null');
        }
        $this->container['price_to_earnings_ratio'] = $price_to_earnings_ratio;

        return $this;
    }

    /**
     * Gets price_to_sales_ratio
     *
     * @return float|null
     */
    public function getPriceToSalesRatio()
    {
        return $this->container['price_to_sales_ratio'];
    }

    /**
     * Sets price_to_sales_ratio
     *
     * @param float|null $price_to_sales_ratio price_to_sales_ratio
     *
     * @return self
     */
    public function setPriceToSalesRatio($price_to_sales_ratio)
    {
        if (is_null($price_to_sales_ratio)) {
            throw new \InvalidArgumentException('non-nullable price_to_sales_ratio cannot be null');
        }
        $this->container['price_to_sales_ratio'] = $price_to_sales_ratio;

        return $this;
    }

    /**
     * Gets profit_margin
     *
     * @return float|null
     */
    public function getProfitMargin()
    {
        return $this->container['profit_margin'];
    }

    /**
     * Sets profit_margin
     *
     * @param float|null $profit_margin profit_margin
     *
     * @return self
     */
    public function setProfitMargin($profit_margin)
    {
        if (is_null($profit_margin)) {
            throw new \InvalidArgumentException('non-nullable profit_margin cannot be null');
        }
        $this->container['profit_margin'] = $profit_margin;

        return $this;
    }

    /**
     * Gets property_plant_equipment_net
     *
     * @return int|null
     */
    public function getPropertyPlantEquipmentNet()
    {
        return $this->container['property_plant_equipment_net'];
    }

    /**
     * Sets property_plant_equipment_net
     *
     * @param int|null $property_plant_equipment_net property_plant_equipment_net
     *
     * @return self
     */
    public function setPropertyPlantEquipmentNet($property_plant_equipment_net)
    {
        if (is_null($property_plant_equipment_net)) {
            throw new \InvalidArgumentException('non-nullable property_plant_equipment_net cannot be null');
        }
        $this->container['property_plant_equipment_net'] = $property_plant_equipment_net;

        return $this;
    }

    /**
     * Gets report_period
     *
     * @return \DateTime|null
     */
    public function getReportPeriod()
    {
        return $this->container['report_period'];
    }

    /**
     * Sets report_period
     *
     * @param \DateTime|null $report_period report_period
     *
     * @return self
     */
    public function setReportPeriod($report_period)
    {
        if (is_null($report_period)) {
            throw new \InvalidArgumentException('non-nullable report_period cannot be null');
        }
        $this->container['report_period'] = $report_period;

        return $this;
    }

    /**
     * Gets research_and_development_expense
     *
     * @return int|null
     */
    public function getResearchAndDevelopmentExpense()
    {
        return $this->container['research_and_development_expense'];
    }

    /**
     * Sets research_and_development_expense
     *
     * @param int|null $research_and_development_expense research_and_development_expense
     *
     * @return self
     */
    public function setResearchAndDevelopmentExpense($research_and_development_expense)
    {
        if (is_null($research_and_development_expense)) {
            throw new \InvalidArgumentException('non-nullable research_and_development_expense cannot be null');
        }
        $this->container['research_and_development_expense'] = $research_and_development_expense;

        return $this;
    }

    /**
     * Gets return_on_average_assets
     *
     * @return int|null
     */
    public function getReturnOnAverageAssets()
    {
        return $this->container['return_on_average_assets'];
    }

    /**
     * Sets return_on_average_assets
     *
     * @param int|null $return_on_average_assets return_on_average_assets
     *
     * @return self
     */
    public function setReturnOnAverageAssets($return_on_average_assets)
    {
        if (is_null($return_on_average_assets)) {
            throw new \InvalidArgumentException('non-nullable return_on_average_assets cannot be null');
        }
        $this->container['return_on_average_assets'] = $return_on_average_assets;

        return $this;
    }

    /**
     * Gets return_on_average_equity
     *
     * @return int|null
     */
    public function getReturnOnAverageEquity()
    {
        return $this->container['return_on_average_equity'];
    }

    /**
     * Sets return_on_average_equity
     *
     * @param int|null $return_on_average_equity return_on_average_equity
     *
     * @return self
     */
    public function setReturnOnAverageEquity($return_on_average_equity)
    {
        if (is_null($return_on_average_equity)) {
            throw new \InvalidArgumentException('non-nullable return_on_average_equity cannot be null');
        }
        $this->container['return_on_average_equity'] = $return_on_average_equity;

        return $this;
    }

    /**
     * Gets return_on_invested_capital
     *
     * @return int|null
     */
    public function getReturnOnInvestedCapital()
    {
        return $this->container['return_on_invested_capital'];
    }

    /**
     * Sets return_on_invested_capital
     *
     * @param int|null $return_on_invested_capital return_on_invested_capital
     *
     * @return self
     */
    public function setReturnOnInvestedCapital($return_on_invested_capital)
    {
        if (is_null($return_on_invested_capital)) {
            throw new \InvalidArgumentException('non-nullable return_on_invested_capital cannot be null');
        }
        $this->container['return_on_invested_capital'] = $return_on_invested_capital;

        return $this;
    }

    /**
     * Gets return_on_sales
     *
     * @return float|null
     */
    public function getReturnOnSales()
    {
        return $this->container['return_on_sales'];
    }

    /**
     * Sets return_on_sales
     *
     * @param float|null $return_on_sales return_on_sales
     *
     * @return self
     */
    public function setReturnOnSales($return_on_sales)
    {
        if (is_null($return_on_sales)) {
            throw new \InvalidArgumentException('non-nullable return_on_sales cannot be null');
        }
        $this->container['return_on_sales'] = $return_on_sales;

        return $this;
    }

    /**
     * Gets revenues
     *
     * @return int|null
     */
    public function getRevenues()
    {
        return $this->container['revenues'];
    }

    /**
     * Sets revenues
     *
     * @param int|null $revenues revenues
     *
     * @return self
     */
    public function setRevenues($revenues)
    {
        if (is_null($revenues)) {
            throw new \InvalidArgumentException('non-nullable revenues cannot be null');
        }
        $this->container['revenues'] = $revenues;

        return $this;
    }

    /**
     * Gets revenues_usd
     *
     * @return int|null
     */
    public function getRevenuesUsd()
    {
        return $this->container['revenues_usd'];
    }

    /**
     * Sets revenues_usd
     *
     * @param int|null $revenues_usd revenues_usd
     *
     * @return self
     */
    public function setRevenuesUsd($revenues_usd)
    {
        if (is_null($revenues_usd)) {
            throw new \InvalidArgumentException('non-nullable revenues_usd cannot be null');
        }
        $this->container['revenues_usd'] = $revenues_usd;

        return $this;
    }

    /**
     * Gets sales_per_share
     *
     * @return float|null
     */
    public function getSalesPerShare()
    {
        return $this->container['sales_per_share'];
    }

    /**
     * Sets sales_per_share
     *
     * @param float|null $sales_per_share sales_per_share
     *
     * @return self
     */
    public function setSalesPerShare($sales_per_share)
    {
        if (is_null($sales_per_share)) {
            throw new \InvalidArgumentException('non-nullable sales_per_share cannot be null');
        }
        $this->container['sales_per_share'] = $sales_per_share;

        return $this;
    }

    /**
     * Gets selling_general_and_administrative_expense
     *
     * @return int|null
     */
    public function getSellingGeneralAndAdministrativeExpense()
    {
        return $this->container['selling_general_and_administrative_expense'];
    }

    /**
     * Sets selling_general_and_administrative_expense
     *
     * @param int|null $selling_general_and_administrative_expense selling_general_and_administrative_expense
     *
     * @return self
     */
    public function setSellingGeneralAndAdministrativeExpense($selling_general_and_administrative_expense)
    {
        if (is_null($selling_general_and_administrative_expense)) {
            throw new \InvalidArgumentException('non-nullable selling_general_and_administrative_expense cannot be null');
        }
        $this->container['selling_general_and_administrative_expense'] = $selling_general_and_administrative_expense;

        return $this;
    }

    /**
     * Gets share_based_compensation
     *
     * @return int|null
     */
    public function getShareBasedCompensation()
    {
        return $this->container['share_based_compensation'];
    }

    /**
     * Sets share_based_compensation
     *
     * @param int|null $share_based_compensation share_based_compensation
     *
     * @return self
     */
    public function setShareBasedCompensation($share_based_compensation)
    {
        if (is_null($share_based_compensation)) {
            throw new \InvalidArgumentException('non-nullable share_based_compensation cannot be null');
        }
        $this->container['share_based_compensation'] = $share_based_compensation;

        return $this;
    }

    /**
     * Gets share_factor
     *
     * @return int|null
     */
    public function getShareFactor()
    {
        return $this->container['share_factor'];
    }

    /**
     * Sets share_factor
     *
     * @param int|null $share_factor share_factor
     *
     * @return self
     */
    public function setShareFactor($share_factor)
    {
        if (is_null($share_factor)) {
            throw new \InvalidArgumentException('non-nullable share_factor cannot be null');
        }
        $this->container['share_factor'] = $share_factor;

        return $this;
    }

    /**
     * Gets share_price_adjusted_close
     *
     * @return float|null
     */
    public function getSharePriceAdjustedClose()
    {
        return $this->container['share_price_adjusted_close'];
    }

    /**
     * Sets share_price_adjusted_close
     *
     * @param float|null $share_price_adjusted_close share_price_adjusted_close
     *
     * @return self
     */
    public function setSharePriceAdjustedClose($share_price_adjusted_close)
    {
        if (is_null($share_price_adjusted_close)) {
            throw new \InvalidArgumentException('non-nullable share_price_adjusted_close cannot be null');
        }
        $this->container['share_price_adjusted_close'] = $share_price_adjusted_close;

        return $this;
    }

    /**
     * Gets shareholders_equity
     *
     * @return int|null
     */
    public function getShareholdersEquity()
    {
        return $this->container['shareholders_equity'];
    }

    /**
     * Sets shareholders_equity
     *
     * @param int|null $shareholders_equity shareholders_equity
     *
     * @return self
     */
    public function setShareholdersEquity($shareholders_equity)
    {
        if (is_null($shareholders_equity)) {
            throw new \InvalidArgumentException('non-nullable shareholders_equity cannot be null');
        }
        $this->container['shareholders_equity'] = $shareholders_equity;

        return $this;
    }

    /**
     * Gets shareholders_equity_usd
     *
     * @return int|null
     */
    public function getShareholdersEquityUsd()
    {
        return $this->container['shareholders_equity_usd'];
    }

    /**
     * Sets shareholders_equity_usd
     *
     * @param int|null $shareholders_equity_usd shareholders_equity_usd
     *
     * @return self
     */
    public function setShareholdersEquityUsd($shareholders_equity_usd)
    {
        if (is_null($shareholders_equity_usd)) {
            throw new \InvalidArgumentException('non-nullable shareholders_equity_usd cannot be null');
        }
        $this->container['shareholders_equity_usd'] = $shareholders_equity_usd;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return int|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param int|null $shares shares
     *
     * @return self
     */
    public function setShares($shares)
    {
        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }
        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets tangible_asset_value
     *
     * @return int|null
     */
    public function getTangibleAssetValue()
    {
        return $this->container['tangible_asset_value'];
    }

    /**
     * Sets tangible_asset_value
     *
     * @param int|null $tangible_asset_value tangible_asset_value
     *
     * @return self
     */
    public function setTangibleAssetValue($tangible_asset_value)
    {
        if (is_null($tangible_asset_value)) {
            throw new \InvalidArgumentException('non-nullable tangible_asset_value cannot be null');
        }
        $this->container['tangible_asset_value'] = $tangible_asset_value;

        return $this;
    }

    /**
     * Gets tangible_assets_book_value_per_share
     *
     * @return float|null
     */
    public function getTangibleAssetsBookValuePerShare()
    {
        return $this->container['tangible_assets_book_value_per_share'];
    }

    /**
     * Sets tangible_assets_book_value_per_share
     *
     * @param float|null $tangible_assets_book_value_per_share tangible_assets_book_value_per_share
     *
     * @return self
     */
    public function setTangibleAssetsBookValuePerShare($tangible_assets_book_value_per_share)
    {
        if (is_null($tangible_assets_book_value_per_share)) {
            throw new \InvalidArgumentException('non-nullable tangible_assets_book_value_per_share cannot be null');
        }
        $this->container['tangible_assets_book_value_per_share'] = $tangible_assets_book_value_per_share;

        return $this;
    }

    /**
     * Gets tax_assets
     *
     * @return int|null
     */
    public function getTaxAssets()
    {
        return $this->container['tax_assets'];
    }

    /**
     * Sets tax_assets
     *
     * @param int|null $tax_assets tax_assets
     *
     * @return self
     */
    public function setTaxAssets($tax_assets)
    {
        if (is_null($tax_assets)) {
            throw new \InvalidArgumentException('non-nullable tax_assets cannot be null');
        }
        $this->container['tax_assets'] = $tax_assets;

        return $this;
    }

    /**
     * Gets tax_liabilities
     *
     * @return int|null
     */
    public function getTaxLiabilities()
    {
        return $this->container['tax_liabilities'];
    }

    /**
     * Sets tax_liabilities
     *
     * @param int|null $tax_liabilities tax_liabilities
     *
     * @return self
     */
    public function setTaxLiabilities($tax_liabilities)
    {
        if (is_null($tax_liabilities)) {
            throw new \InvalidArgumentException('non-nullable tax_liabilities cannot be null');
        }
        $this->container['tax_liabilities'] = $tax_liabilities;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker The exchange symbol that this item is traded under.
     *
     * @return self
     */
    public function setTicker($ticker)
    {
        if (is_null($ticker)) {
            throw new \InvalidArgumentException('non-nullable ticker cannot be null');
        }
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets total_liabilities
     *
     * @return int|null
     */
    public function getTotalLiabilities()
    {
        return $this->container['total_liabilities'];
    }

    /**
     * Sets total_liabilities
     *
     * @param int|null $total_liabilities total_liabilities
     *
     * @return self
     */
    public function setTotalLiabilities($total_liabilities)
    {
        if (is_null($total_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_liabilities cannot be null');
        }
        $this->container['total_liabilities'] = $total_liabilities;

        return $this;
    }

    /**
     * Gets trade_and_non_trade_payables
     *
     * @return int|null
     */
    public function getTradeAndNonTradePayables()
    {
        return $this->container['trade_and_non_trade_payables'];
    }

    /**
     * Sets trade_and_non_trade_payables
     *
     * @param int|null $trade_and_non_trade_payables trade_and_non_trade_payables
     *
     * @return self
     */
    public function setTradeAndNonTradePayables($trade_and_non_trade_payables)
    {
        if (is_null($trade_and_non_trade_payables)) {
            throw new \InvalidArgumentException('non-nullable trade_and_non_trade_payables cannot be null');
        }
        $this->container['trade_and_non_trade_payables'] = $trade_and_non_trade_payables;

        return $this;
    }

    /**
     * Gets trade_and_non_trade_receivables
     *
     * @return int|null
     */
    public function getTradeAndNonTradeReceivables()
    {
        return $this->container['trade_and_non_trade_receivables'];
    }

    /**
     * Sets trade_and_non_trade_receivables
     *
     * @param int|null $trade_and_non_trade_receivables trade_and_non_trade_receivables
     *
     * @return self
     */
    public function setTradeAndNonTradeReceivables($trade_and_non_trade_receivables)
    {
        if (is_null($trade_and_non_trade_receivables)) {
            throw new \InvalidArgumentException('non-nullable trade_and_non_trade_receivables cannot be null');
        }
        $this->container['trade_and_non_trade_receivables'] = $trade_and_non_trade_receivables;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets weighted_average_shares
     *
     * @return int|null
     */
    public function getWeightedAverageShares()
    {
        return $this->container['weighted_average_shares'];
    }

    /**
     * Sets weighted_average_shares
     *
     * @param int|null $weighted_average_shares weighted_average_shares
     *
     * @return self
     */
    public function setWeightedAverageShares($weighted_average_shares)
    {
        if (is_null($weighted_average_shares)) {
            throw new \InvalidArgumentException('non-nullable weighted_average_shares cannot be null');
        }
        $this->container['weighted_average_shares'] = $weighted_average_shares;

        return $this;
    }

    /**
     * Gets weighted_average_shares_diluted
     *
     * @return int|null
     */
    public function getWeightedAverageSharesDiluted()
    {
        return $this->container['weighted_average_shares_diluted'];
    }

    /**
     * Sets weighted_average_shares_diluted
     *
     * @param int|null $weighted_average_shares_diluted weighted_average_shares_diluted
     *
     * @return self
     */
    public function setWeightedAverageSharesDiluted($weighted_average_shares_diluted)
    {
        if (is_null($weighted_average_shares_diluted)) {
            throw new \InvalidArgumentException('non-nullable weighted_average_shares_diluted cannot be null');
        }
        $this->container['weighted_average_shares_diluted'] = $weighted_average_shares_diluted;

        return $this;
    }

    /**
     * Gets working_capital
     *
     * @return int|null
     */
    public function getWorkingCapital()
    {
        return $this->container['working_capital'];
    }

    /**
     * Sets working_capital
     *
     * @param int|null $working_capital working_capital
     *
     * @return self
     */
    public function setWorkingCapital($working_capital)
    {
        if (is_null($working_capital)) {
            throw new \InvalidArgumentException('non-nullable working_capital cannot be null');
        }
        $this->container['working_capital'] = $working_capital;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


