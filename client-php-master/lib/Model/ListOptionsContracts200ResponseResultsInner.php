<?php
/**
 * ListOptionsContracts200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListOptionsContracts200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListOptionsContracts200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListOptionsContracts_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_underlyings' => '\OpenAPI\Client\Model\ListOptionsContracts200ResponseResultsInnerAdditionalUnderlyingsInner[]',
        'cfi' => 'string',
        'contract_type' => 'string',
        'correction' => 'int',
        'exercise_style' => 'string',
        'expiration_date' => 'string',
        'primary_exchange' => 'string',
        'shares_per_contract' => 'float',
        'strike_price' => 'float',
        'ticker' => 'string',
        'underlying_ticker' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_underlyings' => null,
        'cfi' => null,
        'contract_type' => null,
        'correction' => null,
        'exercise_style' => null,
        'expiration_date' => null,
        'primary_exchange' => null,
        'shares_per_contract' => null,
        'strike_price' => null,
        'ticker' => null,
        'underlying_ticker' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_underlyings' => false,
        'cfi' => false,
        'contract_type' => false,
        'correction' => false,
        'exercise_style' => false,
        'expiration_date' => false,
        'primary_exchange' => false,
        'shares_per_contract' => false,
        'strike_price' => false,
        'ticker' => false,
        'underlying_ticker' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_underlyings' => 'additional_underlyings',
        'cfi' => 'cfi',
        'contract_type' => 'contract_type',
        'correction' => 'correction',
        'exercise_style' => 'exercise_style',
        'expiration_date' => 'expiration_date',
        'primary_exchange' => 'primary_exchange',
        'shares_per_contract' => 'shares_per_contract',
        'strike_price' => 'strike_price',
        'ticker' => 'ticker',
        'underlying_ticker' => 'underlying_ticker'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_underlyings' => 'setAdditionalUnderlyings',
        'cfi' => 'setCfi',
        'contract_type' => 'setContractType',
        'correction' => 'setCorrection',
        'exercise_style' => 'setExerciseStyle',
        'expiration_date' => 'setExpirationDate',
        'primary_exchange' => 'setPrimaryExchange',
        'shares_per_contract' => 'setSharesPerContract',
        'strike_price' => 'setStrikePrice',
        'ticker' => 'setTicker',
        'underlying_ticker' => 'setUnderlyingTicker'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_underlyings' => 'getAdditionalUnderlyings',
        'cfi' => 'getCfi',
        'contract_type' => 'getContractType',
        'correction' => 'getCorrection',
        'exercise_style' => 'getExerciseStyle',
        'expiration_date' => 'getExpirationDate',
        'primary_exchange' => 'getPrimaryExchange',
        'shares_per_contract' => 'getSharesPerContract',
        'strike_price' => 'getStrikePrice',
        'ticker' => 'getTicker',
        'underlying_ticker' => 'getUnderlyingTicker'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXERCISE_STYLE_AMERICAN = 'american';
    public const EXERCISE_STYLE_EUROPEAN = 'european';
    public const EXERCISE_STYLE_BERMUDAN = 'bermudan';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExerciseStyleAllowableValues()
    {
        return [
            self::EXERCISE_STYLE_AMERICAN,
            self::EXERCISE_STYLE_EUROPEAN,
            self::EXERCISE_STYLE_BERMUDAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_underlyings', $data ?? [], null);
        $this->setIfExists('cfi', $data ?? [], null);
        $this->setIfExists('contract_type', $data ?? [], null);
        $this->setIfExists('correction', $data ?? [], null);
        $this->setIfExists('exercise_style', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('primary_exchange', $data ?? [], null);
        $this->setIfExists('shares_per_contract', $data ?? [], null);
        $this->setIfExists('strike_price', $data ?? [], null);
        $this->setIfExists('ticker', $data ?? [], null);
        $this->setIfExists('underlying_ticker', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExerciseStyleAllowableValues();
        if (!is_null($this->container['exercise_style']) && !in_array($this->container['exercise_style'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exercise_style', must be one of '%s'",
                $this->container['exercise_style'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_underlyings
     *
     * @return \OpenAPI\Client\Model\ListOptionsContracts200ResponseResultsInnerAdditionalUnderlyingsInner[]|null
     */
    public function getAdditionalUnderlyings()
    {
        return $this->container['additional_underlyings'];
    }

    /**
     * Sets additional_underlyings
     *
     * @param \OpenAPI\Client\Model\ListOptionsContracts200ResponseResultsInnerAdditionalUnderlyingsInner[]|null $additional_underlyings If an option contract has additional underlyings or deliverables associated with it, they will appear here. See <a rel=\"noopener noreferrer nofollow\" target=\"_blank\" href=\"https://www.optionseducation.org/referencelibrary/faq/splits-mergers-spinoffs-bankruptcies\">here</a> for some examples of what might cause a contract to have additional underlyings.
     *
     * @return self
     */
    public function setAdditionalUnderlyings($additional_underlyings)
    {
        if (is_null($additional_underlyings)) {
            throw new \InvalidArgumentException('non-nullable additional_underlyings cannot be null');
        }
        $this->container['additional_underlyings'] = $additional_underlyings;

        return $this;
    }

    /**
     * Gets cfi
     *
     * @return string|null
     */
    public function getCfi()
    {
        return $this->container['cfi'];
    }

    /**
     * Sets cfi
     *
     * @param string|null $cfi The 6 letter CFI code of the contract (defined in <a rel=\"nofollow\" target=\"_blank\" href=\"https://en.wikipedia.org/wiki/ISO_10962\">ISO 10962</a>)
     *
     * @return self
     */
    public function setCfi($cfi)
    {
        if (is_null($cfi)) {
            throw new \InvalidArgumentException('non-nullable cfi cannot be null');
        }
        $this->container['cfi'] = $cfi;

        return $this;
    }

    /**
     * Gets contract_type
     *
     * @return string|null
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param string|null $contract_type The type of contract. Can be \"put\", \"call\", or in some rare cases, \"other\".
     *
     * @return self
     */
    public function setContractType($contract_type)
    {
        if (is_null($contract_type)) {
            throw new \InvalidArgumentException('non-nullable contract_type cannot be null');
        }
        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets correction
     *
     * @return int|null
     */
    public function getCorrection()
    {
        return $this->container['correction'];
    }

    /**
     * Sets correction
     *
     * @param int|null $correction The correction number for this option contract.
     *
     * @return self
     */
    public function setCorrection($correction)
    {
        if (is_null($correction)) {
            throw new \InvalidArgumentException('non-nullable correction cannot be null');
        }
        $this->container['correction'] = $correction;

        return $this;
    }

    /**
     * Gets exercise_style
     *
     * @return string|null
     */
    public function getExerciseStyle()
    {
        return $this->container['exercise_style'];
    }

    /**
     * Sets exercise_style
     *
     * @param string|null $exercise_style The exercise style of this contract. See <a rel=\"nofollow\" target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Option_style\">this link</a> for more details on exercise styles.
     *
     * @return self
     */
    public function setExerciseStyle($exercise_style)
    {
        if (is_null($exercise_style)) {
            throw new \InvalidArgumentException('non-nullable exercise_style cannot be null');
        }
        $allowedValues = $this->getExerciseStyleAllowableValues();
        if (!in_array($exercise_style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exercise_style', must be one of '%s'",
                    $exercise_style,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exercise_style'] = $exercise_style;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date The contract's expiration date in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets primary_exchange
     *
     * @return string|null
     */
    public function getPrimaryExchange()
    {
        return $this->container['primary_exchange'];
    }

    /**
     * Sets primary_exchange
     *
     * @param string|null $primary_exchange The MIC code of the primary exchange that this contract is listed on.
     *
     * @return self
     */
    public function setPrimaryExchange($primary_exchange)
    {
        if (is_null($primary_exchange)) {
            throw new \InvalidArgumentException('non-nullable primary_exchange cannot be null');
        }
        $this->container['primary_exchange'] = $primary_exchange;

        return $this;
    }

    /**
     * Gets shares_per_contract
     *
     * @return float|null
     */
    public function getSharesPerContract()
    {
        return $this->container['shares_per_contract'];
    }

    /**
     * Sets shares_per_contract
     *
     * @param float|null $shares_per_contract The number of shares per contract for this contract.
     *
     * @return self
     */
    public function setSharesPerContract($shares_per_contract)
    {
        if (is_null($shares_per_contract)) {
            throw new \InvalidArgumentException('non-nullable shares_per_contract cannot be null');
        }
        $this->container['shares_per_contract'] = $shares_per_contract;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return float|null
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param float|null $strike_price The strike price of the option contract.
     *
     * @return self
     */
    public function setStrikePrice($strike_price)
    {
        if (is_null($strike_price)) {
            throw new \InvalidArgumentException('non-nullable strike_price cannot be null');
        }
        $this->container['strike_price'] = $strike_price;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string|null
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string|null $ticker The ticker for the option contract.
     *
     * @return self
     */
    public function setTicker($ticker)
    {
        if (is_null($ticker)) {
            throw new \InvalidArgumentException('non-nullable ticker cannot be null');
        }
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets underlying_ticker
     *
     * @return string|null
     */
    public function getUnderlyingTicker()
    {
        return $this->container['underlying_ticker'];
    }

    /**
     * Sets underlying_ticker
     *
     * @param string|null $underlying_ticker The underlying ticker that the option contract relates to.
     *
     * @return self
     */
    public function setUnderlyingTicker($underlying_ticker)
    {
        if (is_null($underlying_ticker)) {
            throw new \InvalidArgumentException('non-nullable underlying_ticker cannot be null');
        }
        $this->container['underlying_ticker'] = $underlying_ticker;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


