<?php
/**
 * OptionsChain200ResponseResultsInnerLastQuote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OptionsChain200ResponseResultsInnerLastQuote Class Doc Comment
 *
 * @category Class
 * @description The most recent quote for this contract. This is only returned if your current plan includes quotes.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OptionsChain200ResponseResultsInnerLastQuote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OptionsChain_200_response_results_inner_last_quote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ask' => 'float',
        'ask_exchange' => 'float',
        'ask_size' => 'float',
        'bid' => 'float',
        'bid_exchange' => 'float',
        'bid_size' => 'float',
        'last_updated' => 'int',
        'midpoint' => 'float',
        'timeframe' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ask' => 'double',
        'ask_exchange' => 'int32',
        'ask_size' => 'double',
        'bid' => 'double',
        'bid_exchange' => 'int32',
        'bid_size' => 'double',
        'last_updated' => 'int64',
        'midpoint' => 'double',
        'timeframe' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ask' => false,
        'ask_exchange' => false,
        'ask_size' => false,
        'bid' => false,
        'bid_exchange' => false,
        'bid_size' => false,
        'last_updated' => false,
        'midpoint' => false,
        'timeframe' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ask' => 'ask',
        'ask_exchange' => 'ask_exchange',
        'ask_size' => 'ask_size',
        'bid' => 'bid',
        'bid_exchange' => 'bid_exchange',
        'bid_size' => 'bid_size',
        'last_updated' => 'last_updated',
        'midpoint' => 'midpoint',
        'timeframe' => 'timeframe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ask' => 'setAsk',
        'ask_exchange' => 'setAskExchange',
        'ask_size' => 'setAskSize',
        'bid' => 'setBid',
        'bid_exchange' => 'setBidExchange',
        'bid_size' => 'setBidSize',
        'last_updated' => 'setLastUpdated',
        'midpoint' => 'setMidpoint',
        'timeframe' => 'setTimeframe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ask' => 'getAsk',
        'ask_exchange' => 'getAskExchange',
        'ask_size' => 'getAskSize',
        'bid' => 'getBid',
        'bid_exchange' => 'getBidExchange',
        'bid_size' => 'getBidSize',
        'last_updated' => 'getLastUpdated',
        'midpoint' => 'getMidpoint',
        'timeframe' => 'getTimeframe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMEFRAME_DELAYED = 'DELAYED';
    public const TIMEFRAME_REAL_TIME = 'REAL-TIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeframeAllowableValues()
    {
        return [
            self::TIMEFRAME_DELAYED,
            self::TIMEFRAME_REAL_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ask', $data ?? [], null);
        $this->setIfExists('ask_exchange', $data ?? [], null);
        $this->setIfExists('ask_size', $data ?? [], null);
        $this->setIfExists('bid', $data ?? [], null);
        $this->setIfExists('bid_exchange', $data ?? [], null);
        $this->setIfExists('bid_size', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('midpoint', $data ?? [], null);
        $this->setIfExists('timeframe', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ask'] === null) {
            $invalidProperties[] = "'ask' can't be null";
        }
        if ($this->container['ask_size'] === null) {
            $invalidProperties[] = "'ask_size' can't be null";
        }
        if ($this->container['bid'] === null) {
            $invalidProperties[] = "'bid' can't be null";
        }
        if ($this->container['bid_size'] === null) {
            $invalidProperties[] = "'bid_size' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        if ($this->container['midpoint'] === null) {
            $invalidProperties[] = "'midpoint' can't be null";
        }
        if ($this->container['timeframe'] === null) {
            $invalidProperties[] = "'timeframe' can't be null";
        }
        $allowedValues = $this->getTimeframeAllowableValues();
        if (!is_null($this->container['timeframe']) && !in_array($this->container['timeframe'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timeframe', must be one of '%s'",
                $this->container['timeframe'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ask
     *
     * @return float
     */
    public function getAsk()
    {
        return $this->container['ask'];
    }

    /**
     * Sets ask
     *
     * @param float $ask The ask price.
     *
     * @return self
     */
    public function setAsk($ask)
    {
        if (is_null($ask)) {
            throw new \InvalidArgumentException('non-nullable ask cannot be null');
        }
        $this->container['ask'] = $ask;

        return $this;
    }

    /**
     * Gets ask_exchange
     *
     * @return float|null
     */
    public function getAskExchange()
    {
        return $this->container['ask_exchange'];
    }

    /**
     * Sets ask_exchange
     *
     * @param float|null $ask_exchange The ask side exchange ID. See <a href=\"https://polygon.io/docs/stocks/get_v3_reference_exchanges\" alt=\"Exchanges\">Exchanges</a> for Polygon.io's mapping of exchange IDs.
     *
     * @return self
     */
    public function setAskExchange($ask_exchange)
    {
        if (is_null($ask_exchange)) {
            throw new \InvalidArgumentException('non-nullable ask_exchange cannot be null');
        }
        $this->container['ask_exchange'] = $ask_exchange;

        return $this;
    }

    /**
     * Gets ask_size
     *
     * @return float
     */
    public function getAskSize()
    {
        return $this->container['ask_size'];
    }

    /**
     * Sets ask_size
     *
     * @param float $ask_size The ask size.
     *
     * @return self
     */
    public function setAskSize($ask_size)
    {
        if (is_null($ask_size)) {
            throw new \InvalidArgumentException('non-nullable ask_size cannot be null');
        }
        $this->container['ask_size'] = $ask_size;

        return $this;
    }

    /**
     * Gets bid
     *
     * @return float
     */
    public function getBid()
    {
        return $this->container['bid'];
    }

    /**
     * Sets bid
     *
     * @param float $bid The bid price.
     *
     * @return self
     */
    public function setBid($bid)
    {
        if (is_null($bid)) {
            throw new \InvalidArgumentException('non-nullable bid cannot be null');
        }
        $this->container['bid'] = $bid;

        return $this;
    }

    /**
     * Gets bid_exchange
     *
     * @return float|null
     */
    public function getBidExchange()
    {
        return $this->container['bid_exchange'];
    }

    /**
     * Sets bid_exchange
     *
     * @param float|null $bid_exchange The bid side exchange ID. See <a href=\"https://polygon.io/docs/stocks/get_v3_reference_exchanges\" alt=\"Exchanges\">Exchanges</a> for Polygon.io's mapping of exchange IDs.
     *
     * @return self
     */
    public function setBidExchange($bid_exchange)
    {
        if (is_null($bid_exchange)) {
            throw new \InvalidArgumentException('non-nullable bid_exchange cannot be null');
        }
        $this->container['bid_exchange'] = $bid_exchange;

        return $this;
    }

    /**
     * Gets bid_size
     *
     * @return float
     */
    public function getBidSize()
    {
        return $this->container['bid_size'];
    }

    /**
     * Sets bid_size
     *
     * @param float $bid_size The bid size.
     *
     * @return self
     */
    public function setBidSize($bid_size)
    {
        if (is_null($bid_size)) {
            throw new \InvalidArgumentException('non-nullable bid_size cannot be null');
        }
        $this->container['bid_size'] = $bid_size;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param int $last_updated The nanosecond timestamp of when this information was updated.
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets midpoint
     *
     * @return float
     */
    public function getMidpoint()
    {
        return $this->container['midpoint'];
    }

    /**
     * Sets midpoint
     *
     * @param float $midpoint The average of the bid and ask price.
     *
     * @return self
     */
    public function setMidpoint($midpoint)
    {
        if (is_null($midpoint)) {
            throw new \InvalidArgumentException('non-nullable midpoint cannot be null');
        }
        $this->container['midpoint'] = $midpoint;

        return $this;
    }

    /**
     * Gets timeframe
     *
     * @return string
     */
    public function getTimeframe()
    {
        return $this->container['timeframe'];
    }

    /**
     * Sets timeframe
     *
     * @param string $timeframe The time relevance of the data.
     *
     * @return self
     */
    public function setTimeframe($timeframe)
    {
        if (is_null($timeframe)) {
            throw new \InvalidArgumentException('non-nullable timeframe cannot be null');
        }
        $allowedValues = $this->getTimeframeAllowableValues();
        if (!in_array($timeframe, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timeframe', must be one of '%s'",
                    $timeframe,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timeframe'] = $timeframe;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


