<?php
/**
 * ListFinancials200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListFinancials200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListFinancials200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListFinancials_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acceptance_datetime' => 'mixed',
        'cik' => 'string',
        'company_name' => 'string',
        'end_date' => 'string',
        'filing_date' => 'mixed',
        'financials' => '\OpenAPI\Client\Model\ListFinancials200ResponseResultsInnerFinancials',
        'fiscal_period' => 'string',
        'fiscal_year' => 'string',
        'source_filing_file_url' => 'mixed',
        'source_filing_url' => 'string',
        'start_date' => 'string',
        'tickers' => 'string[]',
        'timeframe' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acceptance_datetime' => null,
        'cik' => null,
        'company_name' => null,
        'end_date' => null,
        'filing_date' => null,
        'financials' => null,
        'fiscal_period' => null,
        'fiscal_year' => null,
        'source_filing_file_url' => null,
        'source_filing_url' => null,
        'start_date' => null,
        'tickers' => null,
        'timeframe' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acceptance_datetime' => true,
        'cik' => false,
        'company_name' => false,
        'end_date' => false,
        'filing_date' => true,
        'financials' => false,
        'fiscal_period' => false,
        'fiscal_year' => false,
        'source_filing_file_url' => true,
        'source_filing_url' => false,
        'start_date' => false,
        'tickers' => false,
        'timeframe' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptance_datetime' => 'acceptance_datetime',
        'cik' => 'cik',
        'company_name' => 'company_name',
        'end_date' => 'end_date',
        'filing_date' => 'filing_date',
        'financials' => 'financials',
        'fiscal_period' => 'fiscal_period',
        'fiscal_year' => 'fiscal_year',
        'source_filing_file_url' => 'source_filing_file_url',
        'source_filing_url' => 'source_filing_url',
        'start_date' => 'start_date',
        'tickers' => 'tickers',
        'timeframe' => 'timeframe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptance_datetime' => 'setAcceptanceDatetime',
        'cik' => 'setCik',
        'company_name' => 'setCompanyName',
        'end_date' => 'setEndDate',
        'filing_date' => 'setFilingDate',
        'financials' => 'setFinancials',
        'fiscal_period' => 'setFiscalPeriod',
        'fiscal_year' => 'setFiscalYear',
        'source_filing_file_url' => 'setSourceFilingFileUrl',
        'source_filing_url' => 'setSourceFilingUrl',
        'start_date' => 'setStartDate',
        'tickers' => 'setTickers',
        'timeframe' => 'setTimeframe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptance_datetime' => 'getAcceptanceDatetime',
        'cik' => 'getCik',
        'company_name' => 'getCompanyName',
        'end_date' => 'getEndDate',
        'filing_date' => 'getFilingDate',
        'financials' => 'getFinancials',
        'fiscal_period' => 'getFiscalPeriod',
        'fiscal_year' => 'getFiscalYear',
        'source_filing_file_url' => 'getSourceFilingFileUrl',
        'source_filing_url' => 'getSourceFilingUrl',
        'start_date' => 'getStartDate',
        'tickers' => 'getTickers',
        'timeframe' => 'getTimeframe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acceptance_datetime', $data ?? [], null);
        $this->setIfExists('cik', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('filing_date', $data ?? [], null);
        $this->setIfExists('financials', $data ?? [], null);
        $this->setIfExists('fiscal_period', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('source_filing_file_url', $data ?? [], null);
        $this->setIfExists('source_filing_url', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('tickers', $data ?? [], null);
        $this->setIfExists('timeframe', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cik'] === null) {
            $invalidProperties[] = "'cik' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['financials'] === null) {
            $invalidProperties[] = "'financials' can't be null";
        }
        if ($this->container['fiscal_period'] === null) {
            $invalidProperties[] = "'fiscal_period' can't be null";
        }
        if ($this->container['timeframe'] === null) {
            $invalidProperties[] = "'timeframe' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptance_datetime
     *
     * @return mixed|null
     */
    public function getAcceptanceDatetime()
    {
        return $this->container['acceptance_datetime'];
    }

    /**
     * Sets acceptance_datetime
     *
     * @param mixed|null $acceptance_datetime The datetime (EST timezone) the filing was accepted by EDGAR in YYYYMMDDHHMMSS format.
     *
     * @return self
     */
    public function setAcceptanceDatetime($acceptance_datetime)
    {
        if (is_null($acceptance_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'acceptance_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acceptance_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acceptance_datetime'] = $acceptance_datetime;

        return $this;
    }

    /**
     * Gets cik
     *
     * @return string
     */
    public function getCik()
    {
        return $this->container['cik'];
    }

    /**
     * Sets cik
     *
     * @param string $cik The CIK number for the company.
     *
     * @return self
     */
    public function setCik($cik)
    {
        if (is_null($cik)) {
            throw new \InvalidArgumentException('non-nullable cik cannot be null');
        }
        $this->container['cik'] = $cik;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name The company name.
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date The end date of the period that these financials cover in YYYYMMDD format.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return mixed|null
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param mixed|null $filing_date The date that the SEC filing which these financials were derived from was made available. Note that this is not necessarily the date when this information became public, as some companies may publish a press release before filing with the SEC.
     *
     * @return self
     */
    public function setFilingDate($filing_date)
    {
        if (is_null($filing_date)) {
            array_push($this->openAPINullablesSetToNull, 'filing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets financials
     *
     * @return \OpenAPI\Client\Model\ListFinancials200ResponseResultsInnerFinancials
     */
    public function getFinancials()
    {
        return $this->container['financials'];
    }

    /**
     * Sets financials
     *
     * @param \OpenAPI\Client\Model\ListFinancials200ResponseResultsInnerFinancials $financials financials
     *
     * @return self
     */
    public function setFinancials($financials)
    {
        if (is_null($financials)) {
            throw new \InvalidArgumentException('non-nullable financials cannot be null');
        }
        $this->container['financials'] = $financials;

        return $this;
    }

    /**
     * Gets fiscal_period
     *
     * @return string
     */
    public function getFiscalPeriod()
    {
        return $this->container['fiscal_period'];
    }

    /**
     * Sets fiscal_period
     *
     * @param string $fiscal_period Fiscal period of the report according to the company (Q1, Q2, Q3, Q4, or FY).
     *
     * @return self
     */
    public function setFiscalPeriod($fiscal_period)
    {
        if (is_null($fiscal_period)) {
            throw new \InvalidArgumentException('non-nullable fiscal_period cannot be null');
        }
        $this->container['fiscal_period'] = $fiscal_period;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return string|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param string|null $fiscal_year Fiscal year of the report according to the company.
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year cannot be null');
        }
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets source_filing_file_url
     *
     * @return mixed|null
     */
    public function getSourceFilingFileUrl()
    {
        return $this->container['source_filing_file_url'];
    }

    /**
     * Sets source_filing_file_url
     *
     * @param mixed|null $source_filing_file_url The URL of the specific XBRL instance document within the SEC filing that these financials were derived from.
     *
     * @return self
     */
    public function setSourceFilingFileUrl($source_filing_file_url)
    {
        if (is_null($source_filing_file_url)) {
            array_push($this->openAPINullablesSetToNull, 'source_filing_file_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_filing_file_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_filing_file_url'] = $source_filing_file_url;

        return $this;
    }

    /**
     * Gets source_filing_url
     *
     * @return string|null
     */
    public function getSourceFilingUrl()
    {
        return $this->container['source_filing_url'];
    }

    /**
     * Sets source_filing_url
     *
     * @param string|null $source_filing_url The URL of the SEC filing that these financials were derived from.
     *
     * @return self
     */
    public function setSourceFilingUrl($source_filing_url)
    {
        if (is_null($source_filing_url)) {
            throw new \InvalidArgumentException('non-nullable source_filing_url cannot be null');
        }
        $this->container['source_filing_url'] = $source_filing_url;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date The start date of the period that these financials cover in YYYYMMDD format.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tickers
     *
     * @return string[]|null
     */
    public function getTickers()
    {
        return $this->container['tickers'];
    }

    /**
     * Sets tickers
     *
     * @param string[]|null $tickers The list of ticker symbols for the company.
     *
     * @return self
     */
    public function setTickers($tickers)
    {
        if (is_null($tickers)) {
            throw new \InvalidArgumentException('non-nullable tickers cannot be null');
        }
        $this->container['tickers'] = $tickers;

        return $this;
    }

    /**
     * Gets timeframe
     *
     * @return string
     */
    public function getTimeframe()
    {
        return $this->container['timeframe'];
    }

    /**
     * Sets timeframe
     *
     * @param string $timeframe The timeframe of the report (quarterly, annual or ttm).
     *
     * @return self
     */
    public function setTimeframe($timeframe)
    {
        if (is_null($timeframe)) {
            throw new \InvalidArgumentException('non-nullable timeframe cannot be null');
        }
        $this->container['timeframe'] = $timeframe;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


