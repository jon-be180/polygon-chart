<?php
/**
 * ListFilings200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListFilings200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListFilings200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListFilings_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acceptance_datetime' => 'string',
        'accession_number' => 'string',
        'entities' => '\OpenAPI\Client\Model\ListFilings200ResponseResultsInnerEntitiesInner[]',
        'files_count' => 'int',
        'filing_date' => 'string',
        'id' => 'string',
        'period_of_report_date' => 'string',
        'source_url' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acceptance_datetime' => null,
        'accession_number' => null,
        'entities' => null,
        'files_count' => 'int64',
        'filing_date' => null,
        'id' => null,
        'period_of_report_date' => null,
        'source_url' => 'uri',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acceptance_datetime' => false,
        'accession_number' => false,
        'entities' => false,
        'files_count' => false,
        'filing_date' => false,
        'id' => false,
        'period_of_report_date' => false,
        'source_url' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptance_datetime' => 'acceptance_datetime',
        'accession_number' => 'accession_number',
        'entities' => 'entities',
        'files_count' => 'files_count',
        'filing_date' => 'filing_date',
        'id' => 'id',
        'period_of_report_date' => 'period_of_report_date',
        'source_url' => 'source_url',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptance_datetime' => 'setAcceptanceDatetime',
        'accession_number' => 'setAccessionNumber',
        'entities' => 'setEntities',
        'files_count' => 'setFilesCount',
        'filing_date' => 'setFilingDate',
        'id' => 'setId',
        'period_of_report_date' => 'setPeriodOfReportDate',
        'source_url' => 'setSourceUrl',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptance_datetime' => 'getAcceptanceDatetime',
        'accession_number' => 'getAccessionNumber',
        'entities' => 'getEntities',
        'files_count' => 'getFilesCount',
        'filing_date' => 'getFilingDate',
        'id' => 'getId',
        'period_of_report_date' => 'getPeriodOfReportDate',
        'source_url' => 'getSourceUrl',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_K = '10-K';
    public const TYPE_Q = '10-Q';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_K,
            self::TYPE_Q,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acceptance_datetime', $data ?? [], null);
        $this->setIfExists('accession_number', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('files_count', $data ?? [], null);
        $this->setIfExists('filing_date', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('period_of_report_date', $data ?? [], null);
        $this->setIfExists('source_url', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['acceptance_datetime'] === null) {
            $invalidProperties[] = "'acceptance_datetime' can't be null";
        }
        if ($this->container['accession_number'] === null) {
            $invalidProperties[] = "'accession_number' can't be null";
        }
        if ($this->container['entities'] === null) {
            $invalidProperties[] = "'entities' can't be null";
        }
        if ($this->container['files_count'] === null) {
            $invalidProperties[] = "'files_count' can't be null";
        }
        if ($this->container['filing_date'] === null) {
            $invalidProperties[] = "'filing_date' can't be null";
        }
        if (!preg_match("/^[0-9]{8}$/", $this->container['filing_date'])) {
            $invalidProperties[] = "invalid value for 'filing_date', must be conform to the pattern /^[0-9]{8}$/.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['period_of_report_date'] === null) {
            $invalidProperties[] = "'period_of_report_date' can't be null";
        }
        if (!preg_match("/^[0-9]{8}$/", $this->container['period_of_report_date'])) {
            $invalidProperties[] = "invalid value for 'period_of_report_date', must be conform to the pattern /^[0-9]{8}$/.";
        }

        if ($this->container['source_url'] === null) {
            $invalidProperties[] = "'source_url' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptance_datetime
     *
     * @return string
     */
    public function getAcceptanceDatetime()
    {
        return $this->container['acceptance_datetime'];
    }

    /**
     * Sets acceptance_datetime
     *
     * @param string $acceptance_datetime The datetime when the filing was accepted by EDGAR in EST (format: YYYYMMDDHHMMSS)
     *
     * @return self
     */
    public function setAcceptanceDatetime($acceptance_datetime)
    {
        if (is_null($acceptance_datetime)) {
            throw new \InvalidArgumentException('non-nullable acceptance_datetime cannot be null');
        }
        $this->container['acceptance_datetime'] = $acceptance_datetime;

        return $this;
    }

    /**
     * Gets accession_number
     *
     * @return string
     */
    public function getAccessionNumber()
    {
        return $this->container['accession_number'];
    }

    /**
     * Sets accession_number
     *
     * @param string $accession_number Filing Accession Number
     *
     * @return self
     */
    public function setAccessionNumber($accession_number)
    {
        if (is_null($accession_number)) {
            throw new \InvalidArgumentException('non-nullable accession_number cannot be null');
        }
        $this->container['accession_number'] = $accession_number;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \OpenAPI\Client\Model\ListFilings200ResponseResultsInnerEntitiesInner[]
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \OpenAPI\Client\Model\ListFilings200ResponseResultsInnerEntitiesInner[] $entities Entities related to the filing (e.g. the document filers).
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets files_count
     *
     * @return int
     */
    public function getFilesCount()
    {
        return $this->container['files_count'];
    }

    /**
     * Sets files_count
     *
     * @param int $files_count The number of files associated with the filing.
     *
     * @return self
     */
    public function setFilesCount($files_count)
    {
        if (is_null($files_count)) {
            throw new \InvalidArgumentException('non-nullable files_count cannot be null');
        }
        $this->container['files_count'] = $files_count;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return string
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param string $filing_date The date when the filing was filed in YYYYMMDD format.
     *
     * @return self
     */
    public function setFilingDate($filing_date)
    {
        if (is_null($filing_date)) {
            throw new \InvalidArgumentException('non-nullable filing_date cannot be null');
        }

        if ((!preg_match("/^[0-9]{8}$/", ObjectSerializer::toString($filing_date)))) {
            throw new \InvalidArgumentException("invalid value for \$filing_date when calling ListFilings200ResponseResultsInner., must conform to the pattern /^[0-9]{8}$/.");
        }

        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the filing.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets period_of_report_date
     *
     * @return string
     */
    public function getPeriodOfReportDate()
    {
        return $this->container['period_of_report_date'];
    }

    /**
     * Sets period_of_report_date
     *
     * @param string $period_of_report_date The period of report for the filing in YYYYMMDD format.
     *
     * @return self
     */
    public function setPeriodOfReportDate($period_of_report_date)
    {
        if (is_null($period_of_report_date)) {
            throw new \InvalidArgumentException('non-nullable period_of_report_date cannot be null');
        }

        if ((!preg_match("/^[0-9]{8}$/", ObjectSerializer::toString($period_of_report_date)))) {
            throw new \InvalidArgumentException("invalid value for \$period_of_report_date when calling ListFilings200ResponseResultsInner., must conform to the pattern /^[0-9]{8}$/.");
        }

        $this->container['period_of_report_date'] = $period_of_report_date;

        return $this;
    }

    /**
     * Gets source_url
     *
     * @return string
     */
    public function getSourceUrl()
    {
        return $this->container['source_url'];
    }

    /**
     * Sets source_url
     *
     * @param string $source_url The source URL is a link back to the upstream source for this filing document.
     *
     * @return self
     */
    public function setSourceUrl($source_url)
    {
        if (is_null($source_url)) {
            throw new \InvalidArgumentException('non-nullable source_url cannot be null');
        }
        $this->container['source_url'] = $source_url;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Filing Type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


