<?php
/**
 * ListConditions200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListConditions200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @description A condition generally refers to any extra information passed in a trade or a quote. These conditions may or may not affect the behavior of aggregates.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListConditions200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListConditions_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abbreviation' => 'string',
        'asset_class' => 'string',
        'data_types' => 'string[]',
        'description' => 'string',
        'exchange' => 'int',
        'id' => 'int',
        'legacy' => 'bool',
        'name' => 'string',
        'sip_mapping' => '\OpenAPI\Client\Model\ListConditions200ResponseResultsInnerSipMapping',
        'type' => 'string',
        'update_rules' => '\OpenAPI\Client\Model\ListConditions200ResponseResultsInnerUpdateRules'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abbreviation' => null,
        'asset_class' => null,
        'data_types' => null,
        'description' => null,
        'exchange' => null,
        'id' => null,
        'legacy' => null,
        'name' => null,
        'sip_mapping' => null,
        'type' => null,
        'update_rules' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abbreviation' => false,
        'asset_class' => false,
        'data_types' => false,
        'description' => false,
        'exchange' => false,
        'id' => false,
        'legacy' => false,
        'name' => false,
        'sip_mapping' => false,
        'type' => false,
        'update_rules' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abbreviation' => 'abbreviation',
        'asset_class' => 'asset_class',
        'data_types' => 'data_types',
        'description' => 'description',
        'exchange' => 'exchange',
        'id' => 'id',
        'legacy' => 'legacy',
        'name' => 'name',
        'sip_mapping' => 'sip_mapping',
        'type' => 'type',
        'update_rules' => 'update_rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abbreviation' => 'setAbbreviation',
        'asset_class' => 'setAssetClass',
        'data_types' => 'setDataTypes',
        'description' => 'setDescription',
        'exchange' => 'setExchange',
        'id' => 'setId',
        'legacy' => 'setLegacy',
        'name' => 'setName',
        'sip_mapping' => 'setSipMapping',
        'type' => 'setType',
        'update_rules' => 'setUpdateRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abbreviation' => 'getAbbreviation',
        'asset_class' => 'getAssetClass',
        'data_types' => 'getDataTypes',
        'description' => 'getDescription',
        'exchange' => 'getExchange',
        'id' => 'getId',
        'legacy' => 'getLegacy',
        'name' => 'getName',
        'sip_mapping' => 'getSipMapping',
        'type' => 'getType',
        'update_rules' => 'getUpdateRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ASSET_CLASS_STOCKS = 'stocks';
    public const ASSET_CLASS_OPTIONS = 'options';
    public const ASSET_CLASS_CRYPTO = 'crypto';
    public const ASSET_CLASS_FX = 'fx';
    public const DATA_TYPES_TRADE = 'trade';
    public const DATA_TYPES_BBO = 'bbo';
    public const DATA_TYPES_NBBO = 'nbbo';
    public const TYPE_SALE_CONDITION = 'sale_condition';
    public const TYPE_QUOTE_CONDITION = 'quote_condition';
    public const TYPE_SIP_GENERATED_FLAG = 'sip_generated_flag';
    public const TYPE_FINANCIAL_STATUS_INDICATOR = 'financial_status_indicator';
    public const TYPE_SHORT_SALE_RESTRICTION_INDICATOR = 'short_sale_restriction_indicator';
    public const TYPE_SETTLEMENT_CONDITION = 'settlement_condition';
    public const TYPE_MARKET_CONDITION = 'market_condition';
    public const TYPE_TRADE_THRU_EXEMPT = 'trade_thru_exempt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssetClassAllowableValues()
    {
        return [
            self::ASSET_CLASS_STOCKS,
            self::ASSET_CLASS_OPTIONS,
            self::ASSET_CLASS_CRYPTO,
            self::ASSET_CLASS_FX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDataTypesAllowableValues()
    {
        return [
            self::DATA_TYPES_TRADE,
            self::DATA_TYPES_BBO,
            self::DATA_TYPES_NBBO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALE_CONDITION,
            self::TYPE_QUOTE_CONDITION,
            self::TYPE_SIP_GENERATED_FLAG,
            self::TYPE_FINANCIAL_STATUS_INDICATOR,
            self::TYPE_SHORT_SALE_RESTRICTION_INDICATOR,
            self::TYPE_SETTLEMENT_CONDITION,
            self::TYPE_MARKET_CONDITION,
            self::TYPE_TRADE_THRU_EXEMPT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abbreviation', $data ?? [], null);
        $this->setIfExists('asset_class', $data ?? [], null);
        $this->setIfExists('data_types', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('exchange', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('legacy', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sip_mapping', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('update_rules', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset_class'] === null) {
            $invalidProperties[] = "'asset_class' can't be null";
        }
        $allowedValues = $this->getAssetClassAllowableValues();
        if (!is_null($this->container['asset_class']) && !in_array($this->container['asset_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'asset_class', must be one of '%s'",
                $this->container['asset_class'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['data_types'] === null) {
            $invalidProperties[] = "'data_types' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['sip_mapping'] === null) {
            $invalidProperties[] = "'sip_mapping' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abbreviation
     *
     * @return string|null
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string|null $abbreviation A commonly-used abbreviation for this condition.
     *
     * @return self
     */
    public function setAbbreviation($abbreviation)
    {
        if (is_null($abbreviation)) {
            throw new \InvalidArgumentException('non-nullable abbreviation cannot be null');
        }
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets asset_class
     *
     * @return string
     */
    public function getAssetClass()
    {
        return $this->container['asset_class'];
    }

    /**
     * Sets asset_class
     *
     * @param string $asset_class An identifier for a group of similar financial instruments.
     *
     * @return self
     */
    public function setAssetClass($asset_class)
    {
        if (is_null($asset_class)) {
            throw new \InvalidArgumentException('non-nullable asset_class cannot be null');
        }
        $allowedValues = $this->getAssetClassAllowableValues();
        if (!in_array($asset_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'asset_class', must be one of '%s'",
                    $asset_class,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asset_class'] = $asset_class;

        return $this;
    }

    /**
     * Gets data_types
     *
     * @return string[]
     */
    public function getDataTypes()
    {
        return $this->container['data_types'];
    }

    /**
     * Sets data_types
     *
     * @param string[] $data_types Data types that this condition applies to.
     *
     * @return self
     */
    public function setDataTypes($data_types)
    {
        if (is_null($data_types)) {
            throw new \InvalidArgumentException('non-nullable data_types cannot be null');
        }
        $allowedValues = $this->getDataTypesAllowableValues();
        if (array_diff($data_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['data_types'] = $data_types;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A short description of the semantics of this condition.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return int|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param int|null $exchange If present, mapping this condition from a Polygon.io code to a SIP symbol depends on this attribute. In other words, data with this condition attached comes exclusively from the given exchange.
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        if (is_null($exchange)) {
            throw new \InvalidArgumentException('non-nullable exchange cannot be null');
        }
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id An identifier used by Polygon.io for this condition. Unique per data type.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets legacy
     *
     * @return bool|null
     */
    public function getLegacy()
    {
        return $this->container['legacy'];
    }

    /**
     * Sets legacy
     *
     * @param bool|null $legacy If true, this condition is from an old version of the SIPs' specs and no longer is used. Other conditions may or may not reuse the same symbol as this one.
     *
     * @return self
     */
    public function setLegacy($legacy)
    {
        if (is_null($legacy)) {
            throw new \InvalidArgumentException('non-nullable legacy cannot be null');
        }
        $this->container['legacy'] = $legacy;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this condition.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sip_mapping
     *
     * @return \OpenAPI\Client\Model\ListConditions200ResponseResultsInnerSipMapping
     */
    public function getSipMapping()
    {
        return $this->container['sip_mapping'];
    }

    /**
     * Sets sip_mapping
     *
     * @param \OpenAPI\Client\Model\ListConditions200ResponseResultsInnerSipMapping $sip_mapping sip_mapping
     *
     * @return self
     */
    public function setSipMapping($sip_mapping)
    {
        if (is_null($sip_mapping)) {
            throw new \InvalidArgumentException('non-nullable sip_mapping cannot be null');
        }
        $this->container['sip_mapping'] = $sip_mapping;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type An identifier for a collection of related conditions.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_rules
     *
     * @return \OpenAPI\Client\Model\ListConditions200ResponseResultsInnerUpdateRules|null
     */
    public function getUpdateRules()
    {
        return $this->container['update_rules'];
    }

    /**
     * Sets update_rules
     *
     * @param \OpenAPI\Client\Model\ListConditions200ResponseResultsInnerUpdateRules|null $update_rules update_rules
     *
     * @return self
     */
    public function setUpdateRules($update_rules)
    {
        if (is_null($update_rules)) {
            throw new \InvalidArgumentException('non-nullable update_rules cannot be null');
        }
        $this->container['update_rules'] = $update_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


