<?php
/**
 * GetMarketStatus200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetMarketStatus200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetMarketStatus200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetMarketStatus_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'after_hours' => 'bool',
        'currencies' => '\OpenAPI\Client\Model\GetMarketStatus200ResponseCurrencies',
        'early_hours' => 'bool',
        'exchanges' => '\OpenAPI\Client\Model\GetMarketStatus200ResponseExchanges',
        'indices_groups' => '\OpenAPI\Client\Model\GetMarketStatus200ResponseIndicesGroups',
        'market' => 'string',
        'server_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'after_hours' => null,
        'currencies' => null,
        'early_hours' => null,
        'exchanges' => null,
        'indices_groups' => null,
        'market' => null,
        'server_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'after_hours' => false,
        'currencies' => false,
        'early_hours' => false,
        'exchanges' => false,
        'indices_groups' => false,
        'market' => false,
        'server_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_hours' => 'afterHours',
        'currencies' => 'currencies',
        'early_hours' => 'earlyHours',
        'exchanges' => 'exchanges',
        'indices_groups' => 'indicesGroups',
        'market' => 'market',
        'server_time' => 'serverTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'after_hours' => 'setAfterHours',
        'currencies' => 'setCurrencies',
        'early_hours' => 'setEarlyHours',
        'exchanges' => 'setExchanges',
        'indices_groups' => 'setIndicesGroups',
        'market' => 'setMarket',
        'server_time' => 'setServerTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'after_hours' => 'getAfterHours',
        'currencies' => 'getCurrencies',
        'early_hours' => 'getEarlyHours',
        'exchanges' => 'getExchanges',
        'indices_groups' => 'getIndicesGroups',
        'market' => 'getMarket',
        'server_time' => 'getServerTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('after_hours', $data ?? [], null);
        $this->setIfExists('currencies', $data ?? [], null);
        $this->setIfExists('early_hours', $data ?? [], null);
        $this->setIfExists('exchanges', $data ?? [], null);
        $this->setIfExists('indices_groups', $data ?? [], null);
        $this->setIfExists('market', $data ?? [], null);
        $this->setIfExists('server_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets after_hours
     *
     * @return bool|null
     */
    public function getAfterHours()
    {
        return $this->container['after_hours'];
    }

    /**
     * Sets after_hours
     *
     * @param bool|null $after_hours Whether or not the market is in post-market hours.
     *
     * @return self
     */
    public function setAfterHours($after_hours)
    {
        if (is_null($after_hours)) {
            throw new \InvalidArgumentException('non-nullable after_hours cannot be null');
        }
        $this->container['after_hours'] = $after_hours;

        return $this;
    }

    /**
     * Gets currencies
     *
     * @return \OpenAPI\Client\Model\GetMarketStatus200ResponseCurrencies|null
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param \OpenAPI\Client\Model\GetMarketStatus200ResponseCurrencies|null $currencies currencies
     *
     * @return self
     */
    public function setCurrencies($currencies)
    {
        if (is_null($currencies)) {
            throw new \InvalidArgumentException('non-nullable currencies cannot be null');
        }
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets early_hours
     *
     * @return bool|null
     */
    public function getEarlyHours()
    {
        return $this->container['early_hours'];
    }

    /**
     * Sets early_hours
     *
     * @param bool|null $early_hours Whether or not the market is in pre-market hours.
     *
     * @return self
     */
    public function setEarlyHours($early_hours)
    {
        if (is_null($early_hours)) {
            throw new \InvalidArgumentException('non-nullable early_hours cannot be null');
        }
        $this->container['early_hours'] = $early_hours;

        return $this;
    }

    /**
     * Gets exchanges
     *
     * @return \OpenAPI\Client\Model\GetMarketStatus200ResponseExchanges|null
     */
    public function getExchanges()
    {
        return $this->container['exchanges'];
    }

    /**
     * Sets exchanges
     *
     * @param \OpenAPI\Client\Model\GetMarketStatus200ResponseExchanges|null $exchanges exchanges
     *
     * @return self
     */
    public function setExchanges($exchanges)
    {
        if (is_null($exchanges)) {
            throw new \InvalidArgumentException('non-nullable exchanges cannot be null');
        }
        $this->container['exchanges'] = $exchanges;

        return $this;
    }

    /**
     * Gets indices_groups
     *
     * @return \OpenAPI\Client\Model\GetMarketStatus200ResponseIndicesGroups|null
     */
    public function getIndicesGroups()
    {
        return $this->container['indices_groups'];
    }

    /**
     * Sets indices_groups
     *
     * @param \OpenAPI\Client\Model\GetMarketStatus200ResponseIndicesGroups|null $indices_groups indices_groups
     *
     * @return self
     */
    public function setIndicesGroups($indices_groups)
    {
        if (is_null($indices_groups)) {
            throw new \InvalidArgumentException('non-nullable indices_groups cannot be null');
        }
        $this->container['indices_groups'] = $indices_groups;

        return $this;
    }

    /**
     * Gets market
     *
     * @return string|null
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param string|null $market The status of the market as a whole.
     *
     * @return self
     */
    public function setMarket($market)
    {
        if (is_null($market)) {
            throw new \InvalidArgumentException('non-nullable market cannot be null');
        }
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return string|null
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param string|null $server_time The current time of the server, returned as a date-time in RFC3339 format.
     *
     * @return self
     */
    public function setServerTime($server_time)
    {
        if (is_null($server_time)) {
            throw new \InvalidArgumentException('non-nullable server_time cannot be null');
        }
        $this->container['server_time'] = $server_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


