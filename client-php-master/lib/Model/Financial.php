<?php
/**
 * Financial
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Financial Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Financial implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Financial';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cash_change' => 'int',
        'cash_flow' => 'int',
        'cost_of_revenue' => 'int',
        'current_assets' => 'int',
        'current_cash' => 'int',
        'current_debt' => 'int',
        'gross_profit' => 'int',
        'net_income' => 'int',
        'operating_expense' => 'int',
        'operating_gains_losses' => 'float',
        'operating_income' => 'int',
        'operating_revenue' => 'int',
        'report_date' => '\DateTime',
        'report_date_str' => 'string',
        'research_and_development' => 'int',
        'shareholder_equity' => 'int',
        'symbol' => 'string',
        'total_assets' => 'int',
        'total_cash' => 'int',
        'total_debt' => 'int',
        'total_liabilities' => 'int',
        'total_revenue' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cash_change' => null,
        'cash_flow' => null,
        'cost_of_revenue' => null,
        'current_assets' => null,
        'current_cash' => null,
        'current_debt' => null,
        'gross_profit' => null,
        'net_income' => null,
        'operating_expense' => null,
        'operating_gains_losses' => null,
        'operating_income' => null,
        'operating_revenue' => null,
        'report_date' => 'date-time',
        'report_date_str' => null,
        'research_and_development' => null,
        'shareholder_equity' => null,
        'symbol' => null,
        'total_assets' => null,
        'total_cash' => null,
        'total_debt' => null,
        'total_liabilities' => null,
        'total_revenue' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cash_change' => false,
        'cash_flow' => false,
        'cost_of_revenue' => false,
        'current_assets' => false,
        'current_cash' => false,
        'current_debt' => false,
        'gross_profit' => false,
        'net_income' => false,
        'operating_expense' => false,
        'operating_gains_losses' => false,
        'operating_income' => false,
        'operating_revenue' => false,
        'report_date' => false,
        'report_date_str' => false,
        'research_and_development' => false,
        'shareholder_equity' => false,
        'symbol' => false,
        'total_assets' => false,
        'total_cash' => false,
        'total_debt' => false,
        'total_liabilities' => false,
        'total_revenue' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cash_change' => 'cashChange',
        'cash_flow' => 'cashFlow',
        'cost_of_revenue' => 'costOfRevenue',
        'current_assets' => 'currentAssets',
        'current_cash' => 'currentCash',
        'current_debt' => 'currentDebt',
        'gross_profit' => 'grossProfit',
        'net_income' => 'netIncome',
        'operating_expense' => 'operatingExpense',
        'operating_gains_losses' => 'operatingGainsLosses',
        'operating_income' => 'operatingIncome',
        'operating_revenue' => 'operatingRevenue',
        'report_date' => 'reportDate',
        'report_date_str' => 'reportDateStr',
        'research_and_development' => 'researchAndDevelopment',
        'shareholder_equity' => 'shareholderEquity',
        'symbol' => 'symbol',
        'total_assets' => 'totalAssets',
        'total_cash' => 'totalCash',
        'total_debt' => 'totalDebt',
        'total_liabilities' => 'totalLiabilities',
        'total_revenue' => 'totalRevenue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cash_change' => 'setCashChange',
        'cash_flow' => 'setCashFlow',
        'cost_of_revenue' => 'setCostOfRevenue',
        'current_assets' => 'setCurrentAssets',
        'current_cash' => 'setCurrentCash',
        'current_debt' => 'setCurrentDebt',
        'gross_profit' => 'setGrossProfit',
        'net_income' => 'setNetIncome',
        'operating_expense' => 'setOperatingExpense',
        'operating_gains_losses' => 'setOperatingGainsLosses',
        'operating_income' => 'setOperatingIncome',
        'operating_revenue' => 'setOperatingRevenue',
        'report_date' => 'setReportDate',
        'report_date_str' => 'setReportDateStr',
        'research_and_development' => 'setResearchAndDevelopment',
        'shareholder_equity' => 'setShareholderEquity',
        'symbol' => 'setSymbol',
        'total_assets' => 'setTotalAssets',
        'total_cash' => 'setTotalCash',
        'total_debt' => 'setTotalDebt',
        'total_liabilities' => 'setTotalLiabilities',
        'total_revenue' => 'setTotalRevenue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cash_change' => 'getCashChange',
        'cash_flow' => 'getCashFlow',
        'cost_of_revenue' => 'getCostOfRevenue',
        'current_assets' => 'getCurrentAssets',
        'current_cash' => 'getCurrentCash',
        'current_debt' => 'getCurrentDebt',
        'gross_profit' => 'getGrossProfit',
        'net_income' => 'getNetIncome',
        'operating_expense' => 'getOperatingExpense',
        'operating_gains_losses' => 'getOperatingGainsLosses',
        'operating_income' => 'getOperatingIncome',
        'operating_revenue' => 'getOperatingRevenue',
        'report_date' => 'getReportDate',
        'report_date_str' => 'getReportDateStr',
        'research_and_development' => 'getResearchAndDevelopment',
        'shareholder_equity' => 'getShareholderEquity',
        'symbol' => 'getSymbol',
        'total_assets' => 'getTotalAssets',
        'total_cash' => 'getTotalCash',
        'total_debt' => 'getTotalDebt',
        'total_liabilities' => 'getTotalLiabilities',
        'total_revenue' => 'getTotalRevenue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cash_change', $data ?? [], null);
        $this->setIfExists('cash_flow', $data ?? [], null);
        $this->setIfExists('cost_of_revenue', $data ?? [], null);
        $this->setIfExists('current_assets', $data ?? [], null);
        $this->setIfExists('current_cash', $data ?? [], null);
        $this->setIfExists('current_debt', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('net_income', $data ?? [], null);
        $this->setIfExists('operating_expense', $data ?? [], null);
        $this->setIfExists('operating_gains_losses', $data ?? [], null);
        $this->setIfExists('operating_income', $data ?? [], null);
        $this->setIfExists('operating_revenue', $data ?? [], null);
        $this->setIfExists('report_date', $data ?? [], null);
        $this->setIfExists('report_date_str', $data ?? [], null);
        $this->setIfExists('research_and_development', $data ?? [], null);
        $this->setIfExists('shareholder_equity', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('total_assets', $data ?? [], null);
        $this->setIfExists('total_cash', $data ?? [], null);
        $this->setIfExists('total_debt', $data ?? [], null);
        $this->setIfExists('total_liabilities', $data ?? [], null);
        $this->setIfExists('total_revenue', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['report_date'] === null) {
            $invalidProperties[] = "'report_date' can't be null";
        }
        if ($this->container['report_date_str'] === null) {
            $invalidProperties[] = "'report_date_str' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cash_change
     *
     * @return int|null
     */
    public function getCashChange()
    {
        return $this->container['cash_change'];
    }

    /**
     * Sets cash_change
     *
     * @param int|null $cash_change cash_change
     *
     * @return self
     */
    public function setCashChange($cash_change)
    {
        if (is_null($cash_change)) {
            throw new \InvalidArgumentException('non-nullable cash_change cannot be null');
        }
        $this->container['cash_change'] = $cash_change;

        return $this;
    }

    /**
     * Gets cash_flow
     *
     * @return int|null
     */
    public function getCashFlow()
    {
        return $this->container['cash_flow'];
    }

    /**
     * Sets cash_flow
     *
     * @param int|null $cash_flow cash_flow
     *
     * @return self
     */
    public function setCashFlow($cash_flow)
    {
        if (is_null($cash_flow)) {
            throw new \InvalidArgumentException('non-nullable cash_flow cannot be null');
        }
        $this->container['cash_flow'] = $cash_flow;

        return $this;
    }

    /**
     * Gets cost_of_revenue
     *
     * @return int|null
     */
    public function getCostOfRevenue()
    {
        return $this->container['cost_of_revenue'];
    }

    /**
     * Sets cost_of_revenue
     *
     * @param int|null $cost_of_revenue cost_of_revenue
     *
     * @return self
     */
    public function setCostOfRevenue($cost_of_revenue)
    {
        if (is_null($cost_of_revenue)) {
            throw new \InvalidArgumentException('non-nullable cost_of_revenue cannot be null');
        }
        $this->container['cost_of_revenue'] = $cost_of_revenue;

        return $this;
    }

    /**
     * Gets current_assets
     *
     * @return int|null
     */
    public function getCurrentAssets()
    {
        return $this->container['current_assets'];
    }

    /**
     * Sets current_assets
     *
     * @param int|null $current_assets current_assets
     *
     * @return self
     */
    public function setCurrentAssets($current_assets)
    {
        if (is_null($current_assets)) {
            throw new \InvalidArgumentException('non-nullable current_assets cannot be null');
        }
        $this->container['current_assets'] = $current_assets;

        return $this;
    }

    /**
     * Gets current_cash
     *
     * @return int|null
     */
    public function getCurrentCash()
    {
        return $this->container['current_cash'];
    }

    /**
     * Sets current_cash
     *
     * @param int|null $current_cash current_cash
     *
     * @return self
     */
    public function setCurrentCash($current_cash)
    {
        if (is_null($current_cash)) {
            throw new \InvalidArgumentException('non-nullable current_cash cannot be null');
        }
        $this->container['current_cash'] = $current_cash;

        return $this;
    }

    /**
     * Gets current_debt
     *
     * @return int|null
     */
    public function getCurrentDebt()
    {
        return $this->container['current_debt'];
    }

    /**
     * Sets current_debt
     *
     * @param int|null $current_debt current_debt
     *
     * @return self
     */
    public function setCurrentDebt($current_debt)
    {
        if (is_null($current_debt)) {
            throw new \InvalidArgumentException('non-nullable current_debt cannot be null');
        }
        $this->container['current_debt'] = $current_debt;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return int|null
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param int|null $gross_profit gross_profit
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            throw new \InvalidArgumentException('non-nullable gross_profit cannot be null');
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets net_income
     *
     * @return int|null
     */
    public function getNetIncome()
    {
        return $this->container['net_income'];
    }

    /**
     * Sets net_income
     *
     * @param int|null $net_income net_income
     *
     * @return self
     */
    public function setNetIncome($net_income)
    {
        if (is_null($net_income)) {
            throw new \InvalidArgumentException('non-nullable net_income cannot be null');
        }
        $this->container['net_income'] = $net_income;

        return $this;
    }

    /**
     * Gets operating_expense
     *
     * @return int|null
     */
    public function getOperatingExpense()
    {
        return $this->container['operating_expense'];
    }

    /**
     * Sets operating_expense
     *
     * @param int|null $operating_expense operating_expense
     *
     * @return self
     */
    public function setOperatingExpense($operating_expense)
    {
        if (is_null($operating_expense)) {
            throw new \InvalidArgumentException('non-nullable operating_expense cannot be null');
        }
        $this->container['operating_expense'] = $operating_expense;

        return $this;
    }

    /**
     * Gets operating_gains_losses
     *
     * @return float|null
     */
    public function getOperatingGainsLosses()
    {
        return $this->container['operating_gains_losses'];
    }

    /**
     * Sets operating_gains_losses
     *
     * @param float|null $operating_gains_losses operating_gains_losses
     *
     * @return self
     */
    public function setOperatingGainsLosses($operating_gains_losses)
    {
        if (is_null($operating_gains_losses)) {
            throw new \InvalidArgumentException('non-nullable operating_gains_losses cannot be null');
        }
        $this->container['operating_gains_losses'] = $operating_gains_losses;

        return $this;
    }

    /**
     * Gets operating_income
     *
     * @return int|null
     */
    public function getOperatingIncome()
    {
        return $this->container['operating_income'];
    }

    /**
     * Sets operating_income
     *
     * @param int|null $operating_income operating_income
     *
     * @return self
     */
    public function setOperatingIncome($operating_income)
    {
        if (is_null($operating_income)) {
            throw new \InvalidArgumentException('non-nullable operating_income cannot be null');
        }
        $this->container['operating_income'] = $operating_income;

        return $this;
    }

    /**
     * Gets operating_revenue
     *
     * @return int|null
     */
    public function getOperatingRevenue()
    {
        return $this->container['operating_revenue'];
    }

    /**
     * Sets operating_revenue
     *
     * @param int|null $operating_revenue operating_revenue
     *
     * @return self
     */
    public function setOperatingRevenue($operating_revenue)
    {
        if (is_null($operating_revenue)) {
            throw new \InvalidArgumentException('non-nullable operating_revenue cannot be null');
        }
        $this->container['operating_revenue'] = $operating_revenue;

        return $this;
    }

    /**
     * Gets report_date
     *
     * @return \DateTime
     */
    public function getReportDate()
    {
        return $this->container['report_date'];
    }

    /**
     * Sets report_date
     *
     * @param \DateTime $report_date Report Date
     *
     * @return self
     */
    public function setReportDate($report_date)
    {
        if (is_null($report_date)) {
            throw new \InvalidArgumentException('non-nullable report_date cannot be null');
        }
        $this->container['report_date'] = $report_date;

        return $this;
    }

    /**
     * Gets report_date_str
     *
     * @return string
     */
    public function getReportDateStr()
    {
        return $this->container['report_date_str'];
    }

    /**
     * Sets report_date_str
     *
     * @param string $report_date_str Report date as non date format
     *
     * @return self
     */
    public function setReportDateStr($report_date_str)
    {
        if (is_null($report_date_str)) {
            throw new \InvalidArgumentException('non-nullable report_date_str cannot be null');
        }
        $this->container['report_date_str'] = $report_date_str;

        return $this;
    }

    /**
     * Gets research_and_development
     *
     * @return int|null
     */
    public function getResearchAndDevelopment()
    {
        return $this->container['research_and_development'];
    }

    /**
     * Sets research_and_development
     *
     * @param int|null $research_and_development research_and_development
     *
     * @return self
     */
    public function setResearchAndDevelopment($research_and_development)
    {
        if (is_null($research_and_development)) {
            throw new \InvalidArgumentException('non-nullable research_and_development cannot be null');
        }
        $this->container['research_and_development'] = $research_and_development;

        return $this;
    }

    /**
     * Gets shareholder_equity
     *
     * @return int|null
     */
    public function getShareholderEquity()
    {
        return $this->container['shareholder_equity'];
    }

    /**
     * Sets shareholder_equity
     *
     * @param int|null $shareholder_equity shareholder_equity
     *
     * @return self
     */
    public function setShareholderEquity($shareholder_equity)
    {
        if (is_null($shareholder_equity)) {
            throw new \InvalidArgumentException('non-nullable shareholder_equity cannot be null');
        }
        $this->container['shareholder_equity'] = $shareholder_equity;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Stock Symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets total_assets
     *
     * @return int|null
     */
    public function getTotalAssets()
    {
        return $this->container['total_assets'];
    }

    /**
     * Sets total_assets
     *
     * @param int|null $total_assets total_assets
     *
     * @return self
     */
    public function setTotalAssets($total_assets)
    {
        if (is_null($total_assets)) {
            throw new \InvalidArgumentException('non-nullable total_assets cannot be null');
        }
        $this->container['total_assets'] = $total_assets;

        return $this;
    }

    /**
     * Gets total_cash
     *
     * @return int|null
     */
    public function getTotalCash()
    {
        return $this->container['total_cash'];
    }

    /**
     * Sets total_cash
     *
     * @param int|null $total_cash total_cash
     *
     * @return self
     */
    public function setTotalCash($total_cash)
    {
        if (is_null($total_cash)) {
            throw new \InvalidArgumentException('non-nullable total_cash cannot be null');
        }
        $this->container['total_cash'] = $total_cash;

        return $this;
    }

    /**
     * Gets total_debt
     *
     * @return int|null
     */
    public function getTotalDebt()
    {
        return $this->container['total_debt'];
    }

    /**
     * Sets total_debt
     *
     * @param int|null $total_debt total_debt
     *
     * @return self
     */
    public function setTotalDebt($total_debt)
    {
        if (is_null($total_debt)) {
            throw new \InvalidArgumentException('non-nullable total_debt cannot be null');
        }
        $this->container['total_debt'] = $total_debt;

        return $this;
    }

    /**
     * Gets total_liabilities
     *
     * @return int|null
     */
    public function getTotalLiabilities()
    {
        return $this->container['total_liabilities'];
    }

    /**
     * Sets total_liabilities
     *
     * @param int|null $total_liabilities total_liabilities
     *
     * @return self
     */
    public function setTotalLiabilities($total_liabilities)
    {
        if (is_null($total_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_liabilities cannot be null');
        }
        $this->container['total_liabilities'] = $total_liabilities;

        return $this;
    }

    /**
     * Gets total_revenue
     *
     * @return int|null
     */
    public function getTotalRevenue()
    {
        return $this->container['total_revenue'];
    }

    /**
     * Sets total_revenue
     *
     * @param int|null $total_revenue total_revenue
     *
     * @return self
     */
    public function setTotalRevenue($total_revenue)
    {
        if (is_null($total_revenue)) {
            throw new \InvalidArgumentException('non-nullable total_revenue cannot be null');
        }
        $this->container['total_revenue'] = $total_revenue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


