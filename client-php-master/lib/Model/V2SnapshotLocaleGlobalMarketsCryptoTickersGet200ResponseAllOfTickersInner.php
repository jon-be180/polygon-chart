<?php
/**
 * V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_v2_snapshot_locale_global_markets_crypto_tickers_get_200_response_allOf_tickers_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'day' => '\OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerDay',
        'fmv' => 'float',
        'last_trade' => '\OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerLastTrade',
        'min' => '\OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerMin',
        'prev_day' => '\OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerPrevDay',
        'ticker' => 'string',
        'todays_change' => 'float',
        'todays_change_perc' => 'float',
        'updated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'day' => null,
        'fmv' => 'double',
        'last_trade' => null,
        'min' => null,
        'prev_day' => null,
        'ticker' => null,
        'todays_change' => 'double',
        'todays_change_perc' => 'double',
        'updated' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'day' => false,
        'fmv' => false,
        'last_trade' => false,
        'min' => false,
        'prev_day' => false,
        'ticker' => false,
        'todays_change' => false,
        'todays_change_perc' => false,
        'updated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day' => 'day',
        'fmv' => 'fmv',
        'last_trade' => 'lastTrade',
        'min' => 'min',
        'prev_day' => 'prevDay',
        'ticker' => 'ticker',
        'todays_change' => 'todaysChange',
        'todays_change_perc' => 'todaysChangePerc',
        'updated' => 'updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day' => 'setDay',
        'fmv' => 'setFmv',
        'last_trade' => 'setLastTrade',
        'min' => 'setMin',
        'prev_day' => 'setPrevDay',
        'ticker' => 'setTicker',
        'todays_change' => 'setTodaysChange',
        'todays_change_perc' => 'setTodaysChangePerc',
        'updated' => 'setUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day' => 'getDay',
        'fmv' => 'getFmv',
        'last_trade' => 'getLastTrade',
        'min' => 'getMin',
        'prev_day' => 'getPrevDay',
        'ticker' => 'getTicker',
        'todays_change' => 'getTodaysChange',
        'todays_change_perc' => 'getTodaysChangePerc',
        'updated' => 'getUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('day', $data ?? [], null);
        $this->setIfExists('fmv', $data ?? [], null);
        $this->setIfExists('last_trade', $data ?? [], null);
        $this->setIfExists('min', $data ?? [], null);
        $this->setIfExists('prev_day', $data ?? [], null);
        $this->setIfExists('ticker', $data ?? [], null);
        $this->setIfExists('todays_change', $data ?? [], null);
        $this->setIfExists('todays_change_perc', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['day'] === null) {
            $invalidProperties[] = "'day' can't be null";
        }
        if ($this->container['last_trade'] === null) {
            $invalidProperties[] = "'last_trade' can't be null";
        }
        if ($this->container['min'] === null) {
            $invalidProperties[] = "'min' can't be null";
        }
        if ($this->container['prev_day'] === null) {
            $invalidProperties[] = "'prev_day' can't be null";
        }
        if ($this->container['ticker'] === null) {
            $invalidProperties[] = "'ticker' can't be null";
        }
        if ($this->container['todays_change'] === null) {
            $invalidProperties[] = "'todays_change' can't be null";
        }
        if ($this->container['todays_change_perc'] === null) {
            $invalidProperties[] = "'todays_change_perc' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day
     *
     * @return \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerDay
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerDay $day day
     *
     * @return self
     */
    public function setDay($day)
    {
        if (is_null($day)) {
            throw new \InvalidArgumentException('non-nullable day cannot be null');
        }
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets fmv
     *
     * @return float|null
     */
    public function getFmv()
    {
        return $this->container['fmv'];
    }

    /**
     * Sets fmv
     *
     * @param float|null $fmv Fair market value is only available on Business plans. It is our proprietary algorithm to generate a real-time, accurate, fair market value of a tradable security. For more information, <a rel=\"nofollow\" target=\"_blank\" href=\"https://polygon.io/contact\">contact us</a>.
     *
     * @return self
     */
    public function setFmv($fmv)
    {
        if (is_null($fmv)) {
            throw new \InvalidArgumentException('non-nullable fmv cannot be null');
        }
        $this->container['fmv'] = $fmv;

        return $this;
    }

    /**
     * Gets last_trade
     *
     * @return \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerLastTrade
     */
    public function getLastTrade()
    {
        return $this->container['last_trade'];
    }

    /**
     * Sets last_trade
     *
     * @param \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerLastTrade $last_trade last_trade
     *
     * @return self
     */
    public function setLastTrade($last_trade)
    {
        if (is_null($last_trade)) {
            throw new \InvalidArgumentException('non-nullable last_trade cannot be null');
        }
        $this->container['last_trade'] = $last_trade;

        return $this;
    }

    /**
     * Gets min
     *
     * @return \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerMin
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerMin $min min
     *
     * @return self
     */
    public function setMin($min)
    {
        if (is_null($min)) {
            throw new \InvalidArgumentException('non-nullable min cannot be null');
        }
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets prev_day
     *
     * @return \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerPrevDay
     */
    public function getPrevDay()
    {
        return $this->container['prev_day'];
    }

    /**
     * Sets prev_day
     *
     * @param \OpenAPI\Client\Model\V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseAllOfTickersInnerPrevDay $prev_day prev_day
     *
     * @return self
     */
    public function setPrevDay($prev_day)
    {
        if (is_null($prev_day)) {
            throw new \InvalidArgumentException('non-nullable prev_day cannot be null');
        }
        $this->container['prev_day'] = $prev_day;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker The exchange symbol that this item is traded under.
     *
     * @return self
     */
    public function setTicker($ticker)
    {
        if (is_null($ticker)) {
            throw new \InvalidArgumentException('non-nullable ticker cannot be null');
        }
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets todays_change
     *
     * @return float
     */
    public function getTodaysChange()
    {
        return $this->container['todays_change'];
    }

    /**
     * Sets todays_change
     *
     * @param float $todays_change The value of the change from the previous day.
     *
     * @return self
     */
    public function setTodaysChange($todays_change)
    {
        if (is_null($todays_change)) {
            throw new \InvalidArgumentException('non-nullable todays_change cannot be null');
        }
        $this->container['todays_change'] = $todays_change;

        return $this;
    }

    /**
     * Gets todays_change_perc
     *
     * @return float
     */
    public function getTodaysChangePerc()
    {
        return $this->container['todays_change_perc'];
    }

    /**
     * Sets todays_change_perc
     *
     * @param float $todays_change_perc The percentage change since the previous day.
     *
     * @return self
     */
    public function setTodaysChangePerc($todays_change_perc)
    {
        if (is_null($todays_change_perc)) {
            throw new \InvalidArgumentException('non-nullable todays_change_perc cannot be null');
        }
        $this->container['todays_change_perc'] = $todays_change_perc;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int $updated The last updated timestamp.
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


