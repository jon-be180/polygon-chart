<?php
/**
 * ReferencesecfilingsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Polygon API
 *
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReferencesecfilingsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReferencesecfilingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'listFilings' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listFilings
     *
     * SEC Filings
     *
     * @param  string $type Query by filing type. (optional)
     * @param  string $filing_date Query by filing date. (optional)
     * @param  string $period_of_report_date Query by period of report. (optional)
     * @param  bool $has_xbrl If true, query only for filings with an XBRL instance file. If false, query for filings without an XBRL instance file. If this parameter is not provided, query for filings with or without XBRL instance files. (optional)
     * @param  string $entities_company_data_name Query by entity company name. (optional)
     * @param  string $entities_company_data_cik Query by entity company CIK. (optional)
     * @param  string $entities_company_data_ticker Query by entity company ticker. (optional)
     * @param  string $entities_company_data_sic Query by entity company SIC. (optional)
     * @param  string $filing_date_gte Search by filing_date. (optional)
     * @param  string $filing_date_gt Search by filing_date. (optional)
     * @param  string $filing_date_lte Search by filing_date. (optional)
     * @param  string $filing_date_lt Search by filing_date. (optional)
     * @param  string $period_of_report_date_gte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_gt Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lt Search by period_of_report_date. (optional)
     * @param  string $entities_company_data_name_search Search by entities.company_data.name. (optional)
     * @param  string $order Order results based on the &#x60;sort&#x60; field. (optional)
     * @param  int $limit Limit the number of results returned, default is 10 and max is 1000. (optional, default to 10)
     * @param  string $sort Sort field used for ordering. (optional, default to 'filing_date')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFilings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListFilings200Response
     */
    public function listFilings($type = null, $filing_date = null, $period_of_report_date = null, $has_xbrl = null, $entities_company_data_name = null, $entities_company_data_cik = null, $entities_company_data_ticker = null, $entities_company_data_sic = null, $filing_date_gte = null, $filing_date_gt = null, $filing_date_lte = null, $filing_date_lt = null, $period_of_report_date_gte = null, $period_of_report_date_gt = null, $period_of_report_date_lte = null, $period_of_report_date_lt = null, $entities_company_data_name_search = null, $order = null, $limit = 10, $sort = 'filing_date', string $contentType = self::contentTypes['listFilings'][0])
    {
        list($response) = $this->listFilingsWithHttpInfo($type, $filing_date, $period_of_report_date, $has_xbrl, $entities_company_data_name, $entities_company_data_cik, $entities_company_data_ticker, $entities_company_data_sic, $filing_date_gte, $filing_date_gt, $filing_date_lte, $filing_date_lt, $period_of_report_date_gte, $period_of_report_date_gt, $period_of_report_date_lte, $period_of_report_date_lt, $entities_company_data_name_search, $order, $limit, $sort, $contentType);
        return $response;
    }

    /**
     * Operation listFilingsWithHttpInfo
     *
     * SEC Filings
     *
     * @param  string $type Query by filing type. (optional)
     * @param  string $filing_date Query by filing date. (optional)
     * @param  string $period_of_report_date Query by period of report. (optional)
     * @param  bool $has_xbrl If true, query only for filings with an XBRL instance file. If false, query for filings without an XBRL instance file. If this parameter is not provided, query for filings with or without XBRL instance files. (optional)
     * @param  string $entities_company_data_name Query by entity company name. (optional)
     * @param  string $entities_company_data_cik Query by entity company CIK. (optional)
     * @param  string $entities_company_data_ticker Query by entity company ticker. (optional)
     * @param  string $entities_company_data_sic Query by entity company SIC. (optional)
     * @param  string $filing_date_gte Search by filing_date. (optional)
     * @param  string $filing_date_gt Search by filing_date. (optional)
     * @param  string $filing_date_lte Search by filing_date. (optional)
     * @param  string $filing_date_lt Search by filing_date. (optional)
     * @param  string $period_of_report_date_gte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_gt Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lt Search by period_of_report_date. (optional)
     * @param  string $entities_company_data_name_search Search by entities.company_data.name. (optional)
     * @param  string $order Order results based on the &#x60;sort&#x60; field. (optional)
     * @param  int $limit Limit the number of results returned, default is 10 and max is 1000. (optional, default to 10)
     * @param  string $sort Sort field used for ordering. (optional, default to 'filing_date')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFilings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListFilings200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFilingsWithHttpInfo($type = null, $filing_date = null, $period_of_report_date = null, $has_xbrl = null, $entities_company_data_name = null, $entities_company_data_cik = null, $entities_company_data_ticker = null, $entities_company_data_sic = null, $filing_date_gte = null, $filing_date_gt = null, $filing_date_lte = null, $filing_date_lt = null, $period_of_report_date_gte = null, $period_of_report_date_gt = null, $period_of_report_date_lte = null, $period_of_report_date_lt = null, $entities_company_data_name_search = null, $order = null, $limit = 10, $sort = 'filing_date', string $contentType = self::contentTypes['listFilings'][0])
    {
        $request = $this->listFilingsRequest($type, $filing_date, $period_of_report_date, $has_xbrl, $entities_company_data_name, $entities_company_data_cik, $entities_company_data_ticker, $entities_company_data_sic, $filing_date_gte, $filing_date_gt, $filing_date_lte, $filing_date_lt, $period_of_report_date_gte, $period_of_report_date_gt, $period_of_report_date_lte, $period_of_report_date_lt, $entities_company_data_name_search, $order, $limit, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListFilings200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListFilings200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListFilings200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListFilings200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListFilings200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFilingsAsync
     *
     * SEC Filings
     *
     * @param  string $type Query by filing type. (optional)
     * @param  string $filing_date Query by filing date. (optional)
     * @param  string $period_of_report_date Query by period of report. (optional)
     * @param  bool $has_xbrl If true, query only for filings with an XBRL instance file. If false, query for filings without an XBRL instance file. If this parameter is not provided, query for filings with or without XBRL instance files. (optional)
     * @param  string $entities_company_data_name Query by entity company name. (optional)
     * @param  string $entities_company_data_cik Query by entity company CIK. (optional)
     * @param  string $entities_company_data_ticker Query by entity company ticker. (optional)
     * @param  string $entities_company_data_sic Query by entity company SIC. (optional)
     * @param  string $filing_date_gte Search by filing_date. (optional)
     * @param  string $filing_date_gt Search by filing_date. (optional)
     * @param  string $filing_date_lte Search by filing_date. (optional)
     * @param  string $filing_date_lt Search by filing_date. (optional)
     * @param  string $period_of_report_date_gte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_gt Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lt Search by period_of_report_date. (optional)
     * @param  string $entities_company_data_name_search Search by entities.company_data.name. (optional)
     * @param  string $order Order results based on the &#x60;sort&#x60; field. (optional)
     * @param  int $limit Limit the number of results returned, default is 10 and max is 1000. (optional, default to 10)
     * @param  string $sort Sort field used for ordering. (optional, default to 'filing_date')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFilings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFilingsAsync($type = null, $filing_date = null, $period_of_report_date = null, $has_xbrl = null, $entities_company_data_name = null, $entities_company_data_cik = null, $entities_company_data_ticker = null, $entities_company_data_sic = null, $filing_date_gte = null, $filing_date_gt = null, $filing_date_lte = null, $filing_date_lt = null, $period_of_report_date_gte = null, $period_of_report_date_gt = null, $period_of_report_date_lte = null, $period_of_report_date_lt = null, $entities_company_data_name_search = null, $order = null, $limit = 10, $sort = 'filing_date', string $contentType = self::contentTypes['listFilings'][0])
    {
        return $this->listFilingsAsyncWithHttpInfo($type, $filing_date, $period_of_report_date, $has_xbrl, $entities_company_data_name, $entities_company_data_cik, $entities_company_data_ticker, $entities_company_data_sic, $filing_date_gte, $filing_date_gt, $filing_date_lte, $filing_date_lt, $period_of_report_date_gte, $period_of_report_date_gt, $period_of_report_date_lte, $period_of_report_date_lt, $entities_company_data_name_search, $order, $limit, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFilingsAsyncWithHttpInfo
     *
     * SEC Filings
     *
     * @param  string $type Query by filing type. (optional)
     * @param  string $filing_date Query by filing date. (optional)
     * @param  string $period_of_report_date Query by period of report. (optional)
     * @param  bool $has_xbrl If true, query only for filings with an XBRL instance file. If false, query for filings without an XBRL instance file. If this parameter is not provided, query for filings with or without XBRL instance files. (optional)
     * @param  string $entities_company_data_name Query by entity company name. (optional)
     * @param  string $entities_company_data_cik Query by entity company CIK. (optional)
     * @param  string $entities_company_data_ticker Query by entity company ticker. (optional)
     * @param  string $entities_company_data_sic Query by entity company SIC. (optional)
     * @param  string $filing_date_gte Search by filing_date. (optional)
     * @param  string $filing_date_gt Search by filing_date. (optional)
     * @param  string $filing_date_lte Search by filing_date. (optional)
     * @param  string $filing_date_lt Search by filing_date. (optional)
     * @param  string $period_of_report_date_gte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_gt Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lt Search by period_of_report_date. (optional)
     * @param  string $entities_company_data_name_search Search by entities.company_data.name. (optional)
     * @param  string $order Order results based on the &#x60;sort&#x60; field. (optional)
     * @param  int $limit Limit the number of results returned, default is 10 and max is 1000. (optional, default to 10)
     * @param  string $sort Sort field used for ordering. (optional, default to 'filing_date')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFilings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFilingsAsyncWithHttpInfo($type = null, $filing_date = null, $period_of_report_date = null, $has_xbrl = null, $entities_company_data_name = null, $entities_company_data_cik = null, $entities_company_data_ticker = null, $entities_company_data_sic = null, $filing_date_gte = null, $filing_date_gt = null, $filing_date_lte = null, $filing_date_lt = null, $period_of_report_date_gte = null, $period_of_report_date_gt = null, $period_of_report_date_lte = null, $period_of_report_date_lt = null, $entities_company_data_name_search = null, $order = null, $limit = 10, $sort = 'filing_date', string $contentType = self::contentTypes['listFilings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListFilings200Response';
        $request = $this->listFilingsRequest($type, $filing_date, $period_of_report_date, $has_xbrl, $entities_company_data_name, $entities_company_data_cik, $entities_company_data_ticker, $entities_company_data_sic, $filing_date_gte, $filing_date_gt, $filing_date_lte, $filing_date_lt, $period_of_report_date_gte, $period_of_report_date_gt, $period_of_report_date_lte, $period_of_report_date_lt, $entities_company_data_name_search, $order, $limit, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFilings'
     *
     * @param  string $type Query by filing type. (optional)
     * @param  string $filing_date Query by filing date. (optional)
     * @param  string $period_of_report_date Query by period of report. (optional)
     * @param  bool $has_xbrl If true, query only for filings with an XBRL instance file. If false, query for filings without an XBRL instance file. If this parameter is not provided, query for filings with or without XBRL instance files. (optional)
     * @param  string $entities_company_data_name Query by entity company name. (optional)
     * @param  string $entities_company_data_cik Query by entity company CIK. (optional)
     * @param  string $entities_company_data_ticker Query by entity company ticker. (optional)
     * @param  string $entities_company_data_sic Query by entity company SIC. (optional)
     * @param  string $filing_date_gte Search by filing_date. (optional)
     * @param  string $filing_date_gt Search by filing_date. (optional)
     * @param  string $filing_date_lte Search by filing_date. (optional)
     * @param  string $filing_date_lt Search by filing_date. (optional)
     * @param  string $period_of_report_date_gte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_gt Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lte Search by period_of_report_date. (optional)
     * @param  string $period_of_report_date_lt Search by period_of_report_date. (optional)
     * @param  string $entities_company_data_name_search Search by entities.company_data.name. (optional)
     * @param  string $order Order results based on the &#x60;sort&#x60; field. (optional)
     * @param  int $limit Limit the number of results returned, default is 10 and max is 1000. (optional, default to 10)
     * @param  string $sort Sort field used for ordering. (optional, default to 'filing_date')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFilings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listFilingsRequest($type = null, $filing_date = null, $period_of_report_date = null, $has_xbrl = null, $entities_company_data_name = null, $entities_company_data_cik = null, $entities_company_data_ticker = null, $entities_company_data_sic = null, $filing_date_gte = null, $filing_date_gt = null, $filing_date_lte = null, $filing_date_lt = null, $period_of_report_date_gte = null, $period_of_report_date_gt = null, $period_of_report_date_lte = null, $period_of_report_date_lt = null, $entities_company_data_name_search = null, $order = null, $limit = 10, $sort = 'filing_date', string $contentType = self::contentTypes['listFilings'][0])
    {


        if ($filing_date !== null && !preg_match("/^[0-9]{8}$/", $filing_date)) {
            throw new \InvalidArgumentException("invalid value for \"filing_date\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($period_of_report_date !== null && !preg_match("/^[0-9]{8}$/", $period_of_report_date)) {
            throw new \InvalidArgumentException("invalid value for \"period_of_report_date\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        





        if ($filing_date_gte !== null && !preg_match("/^[0-9]{8}$/", $filing_date_gte)) {
            throw new \InvalidArgumentException("invalid value for \"filing_date_gte\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($filing_date_gt !== null && !preg_match("/^[0-9]{8}$/", $filing_date_gt)) {
            throw new \InvalidArgumentException("invalid value for \"filing_date_gt\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($filing_date_lte !== null && !preg_match("/^[0-9]{8}$/", $filing_date_lte)) {
            throw new \InvalidArgumentException("invalid value for \"filing_date_lte\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($filing_date_lt !== null && !preg_match("/^[0-9]{8}$/", $filing_date_lt)) {
            throw new \InvalidArgumentException("invalid value for \"filing_date_lt\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($period_of_report_date_gte !== null && !preg_match("/^[0-9]{8}$/", $period_of_report_date_gte)) {
            throw new \InvalidArgumentException("invalid value for \"period_of_report_date_gte\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($period_of_report_date_gt !== null && !preg_match("/^[0-9]{8}$/", $period_of_report_date_gt)) {
            throw new \InvalidArgumentException("invalid value for \"period_of_report_date_gt\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($period_of_report_date_lte !== null && !preg_match("/^[0-9]{8}$/", $period_of_report_date_lte)) {
            throw new \InvalidArgumentException("invalid value for \"period_of_report_date_lte\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        
        if ($period_of_report_date_lt !== null && !preg_match("/^[0-9]{8}$/", $period_of_report_date_lt)) {
            throw new \InvalidArgumentException("invalid value for \"period_of_report_date_lt\" when calling ReferencesecfilingsApi.listFilings, must conform to the pattern /^[0-9]{8}$/.");
        }
        


        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferencesecfilingsApi.listFilings, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferencesecfilingsApi.listFilings, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/reference/sec/filings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filing_date,
            'filing_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_of_report_date,
            'period_of_report_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_xbrl,
            'has_xbrl', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities_company_data_name,
            'entities.company_data.name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities_company_data_cik,
            'entities.company_data.cik', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities_company_data_ticker,
            'entities.company_data.ticker', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities_company_data_sic,
            'entities.company_data.sic', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filing_date_gte,
            'filing_date.gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filing_date_gt,
            'filing_date.gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filing_date_lte,
            'filing_date.lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filing_date_lt,
            'filing_date.lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_of_report_date_gte,
            'period_of_report_date.gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_of_report_date_gt,
            'period_of_report_date.gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_of_report_date_lte,
            'period_of_report_date.lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_of_report_date_lt,
            'period_of_report_date.lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities_company_data_name_search,
            'entities.company_data.name.search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $queryParams['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
